{"ast":null,"code":"/**\n * 엑셀 데이터 처리 및 보간 유틸리티\n */\n\n// 농장 코드 매핑\nexport const FARM_CODES = {\n  'PF_0006021': {\n    name: '충북농장',\n    region: '충북',\n    year: 2021\n  },\n  'PF_0022103': {\n    name: '전북농장A',\n    region: '전북',\n    year: 2021\n  },\n  'PF_0020733': {\n    name: '전북농장B',\n    region: '전북',\n    year: [2020, 2021]\n  },\n  'PF_0020729': {\n    name: '전북농장C',\n    region: '전북',\n    year: [2020, 2021]\n  },\n  'PF_0001306': {\n    name: '전남농장A',\n    region: '전남',\n    year: 2021\n  },\n  'PF_0001065': {\n    name: '전남농장B',\n    region: '전남',\n    year: 2021\n  },\n  'PF_0010052': {\n    name: '전남농장C',\n    region: '전남',\n    year: 2020\n  },\n  'PF_0021128': {\n    name: '대구농장',\n    region: '대구',\n    year: 2020\n  }\n};\n\n// 데이터 타입별 스키마\nexport const DATA_SCHEMAS = {\n  environment: {\n    temperature: {\n      unit: '°C',\n      range: [10, 35],\n      optimal: [18, 25]\n    },\n    humidity: {\n      unit: '%',\n      range: [30, 90],\n      optimal: [60, 75]\n    },\n    co2: {\n      unit: 'ppm',\n      range: [300, 1200],\n      optimal: [400, 800]\n    },\n    lightIntensity: {\n      unit: 'lux',\n      range: [0, 50000],\n      optimal: [20000, 40000]\n    },\n    soilMoisture: {\n      unit: '%',\n      range: [20, 80],\n      optimal: [40, 60]\n    },\n    ph: {\n      unit: 'pH',\n      range: [5.5, 7.5],\n      optimal: [6.0, 6.8]\n    }\n  },\n  growth: {\n    plantHeight: {\n      unit: 'cm',\n      range: [5, 100]\n    },\n    leafLength: {\n      unit: 'cm',\n      range: [3, 25]\n    },\n    leafWidth: {\n      unit: 'cm',\n      range: [2, 15]\n    },\n    stemDiameter: {\n      unit: 'mm',\n      range: [3, 15]\n    },\n    fruitCount: {\n      unit: '개',\n      range: [0, 50]\n    },\n    fruitWeight: {\n      unit: 'g',\n      range: [5, 30]\n    },\n    healthScore: {\n      unit: '점',\n      range: [0, 100]\n    }\n  },\n  management: {\n    yieldAmount: {\n      unit: 'kg',\n      range: [0, 1000]\n    },\n    revenue: {\n      unit: '원',\n      range: [0, 5000000]\n    },\n    cost: {\n      unit: '원',\n      range: [0, 2000000]\n    },\n    profit: {\n      unit: '원',\n      range: [-500000, 3000000]\n    },\n    efficiency: {\n      unit: '%',\n      range: [0, 100]\n    }\n  },\n  control: {\n    heatingStatus: {\n      unit: 'boolean',\n      values: [0, 1]\n    },\n    ventilationStatus: {\n      unit: 'boolean',\n      values: [0, 1]\n    },\n    irrigationStatus: {\n      unit: 'boolean',\n      values: [0, 1]\n    },\n    lightingStatus: {\n      unit: 'boolean',\n      values: [0, 1]\n    },\n    heatingSetpoint: {\n      unit: '°C',\n      range: [15, 30]\n    },\n    ventilationRate: {\n      unit: '%',\n      range: [0, 100]\n    }\n  }\n};\n\n/**\n * 날짜 범위 생성 (데이터 보간용)\n */\nexport const generateDateRange = (startDate, endDate, interval = 'hour') => {\n  const dates = [];\n  const current = new Date(startDate);\n  const end = new Date(endDate);\n  while (current <= end) {\n    dates.push(new Date(current));\n    if (interval === 'hour') {\n      current.setHours(current.getHours() + 1);\n    } else if (interval === 'day') {\n      current.setDate(current.getDate() + 1);\n    } else if (interval === 'week') {\n      current.setDate(current.getDate() + 7);\n    }\n  }\n  return dates;\n};\n\n/**\n * 환경 데이터 보간 생성\n */\nexport const generateEnvironmentData = (farmCode, startDate, endDate) => {\n  const dates = generateDateRange(startDate, endDate, 'hour');\n  const farmInfo = FARM_CODES[farmCode];\n  return dates.map(date => {\n    // 시간대별 패턴 적용\n    const hour = date.getHours();\n    const isDay = hour >= 6 && hour <= 18;\n    const season = getSeason(date);\n\n    // 기본 온도 패턴 (계절별, 시간대별)\n    let baseTemp = season === 'winter' ? 18 : season === 'summer' ? 25 : 22;\n    const tempVariation = isDay ? Math.sin((hour - 6) / 12 * Math.PI) * 3 : -2;\n    const temperature = baseTemp + tempVariation + (Math.random() - 0.5) * 2;\n\n    // 습도 (온도와 반비례 관계)\n    const humidity = Math.max(50, Math.min(85, 80 - (temperature - 20) * 1.5 + (Math.random() - 0.5) * 10));\n\n    // CO2 (낮에는 낮고, 밤에는 높음)\n    const co2 = isDay ? 400 + Math.random() * 100 : 500 + Math.random() * 200;\n\n    // 조도 (일출/일몰 패턴)\n    let lightIntensity = 0;\n    if (isDay) {\n      const dayProgress = (hour - 6) / 12;\n      lightIntensity = Math.sin(dayProgress * Math.PI) * 40000 * (0.8 + Math.random() * 0.4);\n    }\n    return {\n      farmCode,\n      farmName: farmInfo.name,\n      region: farmInfo.region,\n      datetime: date.toISOString(),\n      date: date.toISOString().split('T')[0],\n      time: date.toTimeString().split(' ')[0],\n      temperature: Math.round(temperature * 10) / 10,\n      humidity: Math.round(humidity * 10) / 10,\n      co2: Math.round(co2),\n      lightIntensity: Math.round(lightIntensity),\n      soilMoisture: Math.round((50 + (Math.random() - 0.5) * 20) * 10) / 10,\n      ph: Math.round((6.3 + (Math.random() - 0.5) * 0.6) * 10) / 10\n    };\n  });\n};\n\n/**\n * 생육 데이터 보간 생성\n */\nexport const generateGrowthData = (farmCode, startDate, endDate) => {\n  const dates = generateDateRange(startDate, endDate, 'week');\n  const farmInfo = FARM_CODES[farmCode];\n  return dates.map((date, index) => {\n    // 생장 곡선 적용 (S-curve)\n    const weeksPassed = index;\n    const maxWeeks = dates.length;\n    const growthProgress = 1 / (1 + Math.exp(-0.3 * (weeksPassed - maxWeeks / 2)));\n\n    // 기본 생육 데이터\n    const plantHeight = 10 + growthProgress * 80 + (Math.random() - 0.5) * 5;\n    const leafLength = 5 + growthProgress * 18 + (Math.random() - 0.5) * 2;\n    const leafWidth = 3 + growthProgress * 10 + (Math.random() - 0.5) * 1;\n    const stemDiameter = 3 + growthProgress * 10 + (Math.random() - 0.5) * 1;\n\n    // 결실기 이후 과실 데이터\n    const fruitCount = weeksPassed > maxWeeks * 0.6 ? Math.round(growthProgress * 30 + Math.random() * 10) : 0;\n    const fruitWeight = fruitCount > 0 ? 15 + Math.random() * 10 : 0;\n\n    // 건강도 (환경 조건에 따라 변동)\n    const healthScore = Math.max(70, Math.min(100, 85 + (Math.random() - 0.5) * 20));\n    return {\n      farmCode,\n      farmName: farmInfo.name,\n      region: farmInfo.region,\n      date: date.toISOString().split('T')[0],\n      week: weeksPassed + 1,\n      plantHeight: Math.round(plantHeight * 10) / 10,\n      leafLength: Math.round(leafLength * 10) / 10,\n      leafWidth: Math.round(leafWidth * 10) / 10,\n      stemDiameter: Math.round(stemDiameter * 10) / 10,\n      fruitCount,\n      fruitWeight: Math.round(fruitWeight * 10) / 10,\n      healthScore: Math.round(healthScore),\n      growthStage: getGrowthStage(weeksPassed, maxWeeks)\n    };\n  });\n};\n\n/**\n * 경영 데이터 보간 생성\n */\nexport const generateManagementData = (farmCode, startDate, endDate) => {\n  const dates = generateDateRange(startDate, endDate, 'day');\n  const farmInfo = FARM_CODES[farmCode];\n  let cumulativeYield = 0;\n  let cumulativeRevenue = 0;\n  let cumulativeCost = 0;\n  return dates.map((date, index) => {\n    // 일일 수확량 (계절별 패턴)\n    const season = getSeason(date);\n    const seasonMultiplier = season === 'winter' ? 0.7 : season === 'summer' ? 1.3 : 1.0;\n    const dailyYield = Math.max(0, (5 + Math.random() * 15) * seasonMultiplier);\n\n    // 가격 변동 (시장 가격 시뮬레이션)\n    const basePrice = 8000; // 딸기 kg당 기본 가격\n    const priceVariation = 1 + (Math.random() - 0.5) * 0.3; // ±15% 변동\n    const dailyPrice = basePrice * priceVariation;\n\n    // 일일 수익\n    const dailyRevenue = dailyYield * dailyPrice;\n\n    // 일일 비용 (고정비 + 변동비)\n    const fixedCost = 50000; // 일일 고정비\n    const variableCost = dailyYield * 2000; // kg당 변동비\n    const dailyCost = (fixedCost + variableCost) / 30; // 월 기준을 일 기준으로\n\n    // 누적 데이터\n    cumulativeYield += dailyYield;\n    cumulativeRevenue += dailyRevenue;\n    cumulativeCost += dailyCost;\n    const profit = cumulativeRevenue - cumulativeCost;\n    const efficiency = cumulativeRevenue > 0 ? profit / cumulativeRevenue * 100 : 0;\n    return {\n      farmCode,\n      farmName: farmInfo.name,\n      region: farmInfo.region,\n      date: date.toISOString().split('T')[0],\n      dailyYield: Math.round(dailyYield * 10) / 10,\n      cumulativeYield: Math.round(cumulativeYield * 10) / 10,\n      dailyRevenue: Math.round(dailyRevenue),\n      cumulativeRevenue: Math.round(cumulativeRevenue),\n      dailyCost: Math.round(dailyCost),\n      cumulativeCost: Math.round(cumulativeCost),\n      profit: Math.round(profit),\n      efficiency: Math.round(efficiency * 10) / 10,\n      pricePerKg: Math.round(dailyPrice)\n    };\n  });\n};\n\n/**\n * 제어 데이터 보간 생성\n */\nexport const generateControlData = (farmCode, startDate, endDate) => {\n  const dates = generateDateRange(startDate, endDate, 'hour');\n  const farmInfo = FARM_CODES[farmCode];\n  return dates.map(date => {\n    const hour = date.getHours();\n    const isDay = hour >= 6 && hour <= 18;\n    const season = getSeason(date);\n\n    // 난방 제어 (겨울철, 야간에 주로 가동)\n    const heatingStatus = season === 'winter' && (!isDay || Math.random() < 0.3) ? 1 : 0;\n    const heatingSetpoint = season === 'winter' ? 20 + Math.random() * 5 : 18;\n\n    // 환기 제어 (주간, 여름철에 주로 가동)\n    const ventilationStatus = isDay && Math.random() < 0.7 || season === 'summer' && Math.random() < 0.9 ? 1 : 0;\n    const ventilationRate = ventilationStatus ? 30 + Math.random() * 50 : 0;\n\n    // 관수 제어 (정해진 시간에 가동)\n    const irrigationStatus = [6, 12, 18].includes(hour) && Math.random() < 0.8 ? 1 : 0;\n\n    // 조명 제어 (겨울철 보광용)\n    const lightingStatus = season === 'winter' && [5, 6, 17, 18, 19].includes(hour) ? 1 : 0;\n    return {\n      farmCode,\n      farmName: farmInfo.name,\n      region: farmInfo.region,\n      datetime: date.toISOString(),\n      date: date.toISOString().split('T')[0],\n      time: date.toTimeString().split(' ')[0],\n      heatingStatus,\n      ventilationStatus,\n      irrigationStatus,\n      lightingStatus,\n      heatingSetpoint: Math.round(heatingSetpoint * 10) / 10,\n      ventilationRate: Math.round(ventilationRate),\n      irrigationDuration: irrigationStatus ? 15 + Math.random() * 30 : 0,\n      // 분 단위\n      lightingIntensity: lightingStatus ? 15000 + Math.random() * 10000 : 0\n    };\n  });\n};\n\n/**\n * 통합 데이터 생성\n */\nexport const generateIntegratedData = (filters = {}) => {\n  const {\n    farmCodes = Object.keys(FARM_CODES),\n    startDate = '2020-01-01',\n    endDate = '2021-12-31',\n    dataTypes = ['environment', 'growth', 'management', 'control']\n  } = filters;\n  const result = {};\n  farmCodes.forEach(farmCode => {\n    if (!FARM_CODES[farmCode]) return;\n    result[farmCode] = {};\n    if (dataTypes.includes('environment')) {\n      result[farmCode].environment = generateEnvironmentData(farmCode, startDate, endDate);\n    }\n    if (dataTypes.includes('growth')) {\n      result[farmCode].growth = generateGrowthData(farmCode, startDate, endDate);\n    }\n    if (dataTypes.includes('management')) {\n      result[farmCode].management = generateManagementData(farmCode, startDate, endDate);\n    }\n    if (dataTypes.includes('control')) {\n      result[farmCode].control = generateControlData(farmCode, startDate, endDate);\n    }\n  });\n  return result;\n};\n\n/**\n * 상관관계 계산\n */\nexport const calculateCorrelation = (data, xField, yField) => {\n  const validData = data.filter(d => d[xField] !== null && d[xField] !== undefined && d[yField] !== null && d[yField] !== undefined);\n  if (validData.length < 2) return 0;\n  const xMean = validData.reduce((sum, d) => sum + d[xField], 0) / validData.length;\n  const yMean = validData.reduce((sum, d) => sum + d[yField], 0) / validData.length;\n  let numerator = 0;\n  let xSumSq = 0;\n  let ySumSq = 0;\n  validData.forEach(d => {\n    const xDiff = d[xField] - xMean;\n    const yDiff = d[yField] - yMean;\n    numerator += xDiff * yDiff;\n    xSumSq += xDiff * xDiff;\n    ySumSq += yDiff * yDiff;\n  });\n  const denominator = Math.sqrt(xSumSq * ySumSq);\n  return denominator === 0 ? 0 : numerator / denominator;\n};\n\n/**\n * 헬퍼 함수들\n */\nconst getSeason = date => {\n  const month = date.getMonth() + 1;\n  if (month >= 3 && month <= 5) return 'spring';\n  if (month >= 6 && month <= 8) return 'summer';\n  if (month >= 9 && month <= 11) return 'autumn';\n  return 'winter';\n};\nconst getGrowthStage = (week, totalWeeks) => {\n  const progress = week / totalWeeks;\n  if (progress < 0.2) return '발아기';\n  if (progress < 0.4) return '생장기';\n  if (progress < 0.6) return '개화기';\n  if (progress < 0.8) return '결실기';\n  return '수확기';\n};\n\n/**\n * 데이터 내보내기 (CSV 형식)\n */\nexport const exportToCSV = (data, filename) => {\n  if (!data || data.length === 0) return;\n  const headers = Object.keys(data[0]);\n  const csvContent = [headers.join(','), ...data.map(row => headers.map(header => row[header]).join(','))].join('\\n');\n  const blob = new Blob([csvContent], {\n    type: 'text/csv;charset=utf-8;'\n  });\n  const link = document.createElement('a');\n  const url = URL.createObjectURL(blob);\n  link.setAttribute('href', url);\n  link.setAttribute('download', filename);\n  link.style.visibility = 'hidden';\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n};","map":{"version":3,"names":["FARM_CODES","name","region","year","DATA_SCHEMAS","environment","temperature","unit","range","optimal","humidity","co2","lightIntensity","soilMoisture","ph","growth","plantHeight","leafLength","leafWidth","stemDiameter","fruitCount","fruitWeight","healthScore","management","yieldAmount","revenue","cost","profit","efficiency","control","heatingStatus","values","ventilationStatus","irrigationStatus","lightingStatus","heatingSetpoint","ventilationRate","generateDateRange","startDate","endDate","interval","dates","current","Date","end","push","setHours","getHours","setDate","getDate","generateEnvironmentData","farmCode","farmInfo","map","date","hour","isDay","season","getSeason","baseTemp","tempVariation","Math","sin","PI","random","max","min","dayProgress","farmName","datetime","toISOString","split","time","toTimeString","round","generateGrowthData","index","weeksPassed","maxWeeks","length","growthProgress","exp","week","growthStage","getGrowthStage","generateManagementData","cumulativeYield","cumulativeRevenue","cumulativeCost","seasonMultiplier","dailyYield","basePrice","priceVariation","dailyPrice","dailyRevenue","fixedCost","variableCost","dailyCost","pricePerKg","generateControlData","includes","irrigationDuration","lightingIntensity","generateIntegratedData","filters","farmCodes","Object","keys","dataTypes","result","forEach","calculateCorrelation","data","xField","yField","validData","filter","d","undefined","xMean","reduce","sum","yMean","numerator","xSumSq","ySumSq","xDiff","yDiff","denominator","sqrt","month","getMonth","totalWeeks","progress","exportToCSV","filename","headers","csvContent","join","row","header","blob","Blob","type","link","document","createElement","url","URL","createObjectURL","setAttribute","style","visibility","body","appendChild","click","removeChild"],"sources":["/DATA1/elcom/aisf2/aisf/frontend/src/utils/dataProcessor.js"],"sourcesContent":["/**\n * 엑셀 데이터 처리 및 보간 유틸리티\n */\n\n// 농장 코드 매핑\nexport const FARM_CODES = {\n  'PF_0006021': { name: '충북농장', region: '충북', year: 2021 },\n  'PF_0022103': { name: '전북농장A', region: '전북', year: 2021 },\n  'PF_0020733': { name: '전북농장B', region: '전북', year: [2020, 2021] },\n  'PF_0020729': { name: '전북농장C', region: '전북', year: [2020, 2021] },\n  'PF_0001306': { name: '전남농장A', region: '전남', year: 2021 },\n  'PF_0001065': { name: '전남농장B', region: '전남', year: 2021 },\n  'PF_0010052': { name: '전남농장C', region: '전남', year: 2020 },\n  'PF_0021128': { name: '대구농장', region: '대구', year: 2020 }\n};\n\n// 데이터 타입별 스키마\nexport const DATA_SCHEMAS = {\n  environment: {\n    temperature: { unit: '°C', range: [10, 35], optimal: [18, 25] },\n    humidity: { unit: '%', range: [30, 90], optimal: [60, 75] },\n    co2: { unit: 'ppm', range: [300, 1200], optimal: [400, 800] },\n    lightIntensity: { unit: 'lux', range: [0, 50000], optimal: [20000, 40000] },\n    soilMoisture: { unit: '%', range: [20, 80], optimal: [40, 60] },\n    ph: { unit: 'pH', range: [5.5, 7.5], optimal: [6.0, 6.8] }\n  },\n  growth: {\n    plantHeight: { unit: 'cm', range: [5, 100] },\n    leafLength: { unit: 'cm', range: [3, 25] },\n    leafWidth: { unit: 'cm', range: [2, 15] },\n    stemDiameter: { unit: 'mm', range: [3, 15] },\n    fruitCount: { unit: '개', range: [0, 50] },\n    fruitWeight: { unit: 'g', range: [5, 30] },\n    healthScore: { unit: '점', range: [0, 100] }\n  },\n  management: {\n    yieldAmount: { unit: 'kg', range: [0, 1000] },\n    revenue: { unit: '원', range: [0, 5000000] },\n    cost: { unit: '원', range: [0, 2000000] },\n    profit: { unit: '원', range: [-500000, 3000000] },\n    efficiency: { unit: '%', range: [0, 100] }\n  },\n  control: {\n    heatingStatus: { unit: 'boolean', values: [0, 1] },\n    ventilationStatus: { unit: 'boolean', values: [0, 1] },\n    irrigationStatus: { unit: 'boolean', values: [0, 1] },\n    lightingStatus: { unit: 'boolean', values: [0, 1] },\n    heatingSetpoint: { unit: '°C', range: [15, 30] },\n    ventilationRate: { unit: '%', range: [0, 100] }\n  }\n};\n\n/**\n * 날짜 범위 생성 (데이터 보간용)\n */\nexport const generateDateRange = (startDate, endDate, interval = 'hour') => {\n  const dates = [];\n  const current = new Date(startDate);\n  const end = new Date(endDate);\n  \n  while (current <= end) {\n    dates.push(new Date(current));\n    \n    if (interval === 'hour') {\n      current.setHours(current.getHours() + 1);\n    } else if (interval === 'day') {\n      current.setDate(current.getDate() + 1);\n    } else if (interval === 'week') {\n      current.setDate(current.getDate() + 7);\n    }\n  }\n  \n  return dates;\n};\n\n/**\n * 환경 데이터 보간 생성\n */\nexport const generateEnvironmentData = (farmCode, startDate, endDate) => {\n  const dates = generateDateRange(startDate, endDate, 'hour');\n  const farmInfo = FARM_CODES[farmCode];\n  \n  return dates.map(date => {\n    // 시간대별 패턴 적용\n    const hour = date.getHours();\n    const isDay = hour >= 6 && hour <= 18;\n    const season = getSeason(date);\n    \n    // 기본 온도 패턴 (계절별, 시간대별)\n    let baseTemp = season === 'winter' ? 18 : season === 'summer' ? 25 : 22;\n    const tempVariation = isDay ? Math.sin((hour - 6) / 12 * Math.PI) * 3 : -2;\n    const temperature = baseTemp + tempVariation + (Math.random() - 0.5) * 2;\n    \n    // 습도 (온도와 반비례 관계)\n    const humidity = Math.max(50, Math.min(85, 80 - (temperature - 20) * 1.5 + (Math.random() - 0.5) * 10));\n    \n    // CO2 (낮에는 낮고, 밤에는 높음)\n    const co2 = isDay ? 400 + Math.random() * 100 : 500 + Math.random() * 200;\n    \n    // 조도 (일출/일몰 패턴)\n    let lightIntensity = 0;\n    if (isDay) {\n      const dayProgress = (hour - 6) / 12;\n      lightIntensity = Math.sin(dayProgress * Math.PI) * 40000 * (0.8 + Math.random() * 0.4);\n    }\n    \n    return {\n      farmCode,\n      farmName: farmInfo.name,\n      region: farmInfo.region,\n      datetime: date.toISOString(),\n      date: date.toISOString().split('T')[0],\n      time: date.toTimeString().split(' ')[0],\n      temperature: Math.round(temperature * 10) / 10,\n      humidity: Math.round(humidity * 10) / 10,\n      co2: Math.round(co2),\n      lightIntensity: Math.round(lightIntensity),\n      soilMoisture: Math.round((50 + (Math.random() - 0.5) * 20) * 10) / 10,\n      ph: Math.round((6.3 + (Math.random() - 0.5) * 0.6) * 10) / 10\n    };\n  });\n};\n\n/**\n * 생육 데이터 보간 생성\n */\nexport const generateGrowthData = (farmCode, startDate, endDate) => {\n  const dates = generateDateRange(startDate, endDate, 'week');\n  const farmInfo = FARM_CODES[farmCode];\n  \n  return dates.map((date, index) => {\n    // 생장 곡선 적용 (S-curve)\n    const weeksPassed = index;\n    const maxWeeks = dates.length;\n    const growthProgress = 1 / (1 + Math.exp(-0.3 * (weeksPassed - maxWeeks/2)));\n    \n    // 기본 생육 데이터\n    const plantHeight = 10 + growthProgress * 80 + (Math.random() - 0.5) * 5;\n    const leafLength = 5 + growthProgress * 18 + (Math.random() - 0.5) * 2;\n    const leafWidth = 3 + growthProgress * 10 + (Math.random() - 0.5) * 1;\n    const stemDiameter = 3 + growthProgress * 10 + (Math.random() - 0.5) * 1;\n    \n    // 결실기 이후 과실 데이터\n    const fruitCount = weeksPassed > maxWeeks * 0.6 ? Math.round(growthProgress * 30 + Math.random() * 10) : 0;\n    const fruitWeight = fruitCount > 0 ? 15 + Math.random() * 10 : 0;\n    \n    // 건강도 (환경 조건에 따라 변동)\n    const healthScore = Math.max(70, Math.min(100, 85 + (Math.random() - 0.5) * 20));\n    \n    return {\n      farmCode,\n      farmName: farmInfo.name,\n      region: farmInfo.region,\n      date: date.toISOString().split('T')[0],\n      week: weeksPassed + 1,\n      plantHeight: Math.round(plantHeight * 10) / 10,\n      leafLength: Math.round(leafLength * 10) / 10,\n      leafWidth: Math.round(leafWidth * 10) / 10,\n      stemDiameter: Math.round(stemDiameter * 10) / 10,\n      fruitCount,\n      fruitWeight: Math.round(fruitWeight * 10) / 10,\n      healthScore: Math.round(healthScore),\n      growthStage: getGrowthStage(weeksPassed, maxWeeks)\n    };\n  });\n};\n\n/**\n * 경영 데이터 보간 생성\n */\nexport const generateManagementData = (farmCode, startDate, endDate) => {\n  const dates = generateDateRange(startDate, endDate, 'day');\n  const farmInfo = FARM_CODES[farmCode];\n  \n  let cumulativeYield = 0;\n  let cumulativeRevenue = 0;\n  let cumulativeCost = 0;\n  \n  return dates.map((date, index) => {\n    // 일일 수확량 (계절별 패턴)\n    const season = getSeason(date);\n    const seasonMultiplier = season === 'winter' ? 0.7 : season === 'summer' ? 1.3 : 1.0;\n    const dailyYield = Math.max(0, (5 + Math.random() * 15) * seasonMultiplier);\n    \n    // 가격 변동 (시장 가격 시뮬레이션)\n    const basePrice = 8000; // 딸기 kg당 기본 가격\n    const priceVariation = 1 + (Math.random() - 0.5) * 0.3; // ±15% 변동\n    const dailyPrice = basePrice * priceVariation;\n    \n    // 일일 수익\n    const dailyRevenue = dailyYield * dailyPrice;\n    \n    // 일일 비용 (고정비 + 변동비)\n    const fixedCost = 50000; // 일일 고정비\n    const variableCost = dailyYield * 2000; // kg당 변동비\n    const dailyCost = (fixedCost + variableCost) / 30; // 월 기준을 일 기준으로\n    \n    // 누적 데이터\n    cumulativeYield += dailyYield;\n    cumulativeRevenue += dailyRevenue;\n    cumulativeCost += dailyCost;\n    \n    const profit = cumulativeRevenue - cumulativeCost;\n    const efficiency = cumulativeRevenue > 0 ? (profit / cumulativeRevenue) * 100 : 0;\n    \n    return {\n      farmCode,\n      farmName: farmInfo.name,\n      region: farmInfo.region,\n      date: date.toISOString().split('T')[0],\n      dailyYield: Math.round(dailyYield * 10) / 10,\n      cumulativeYield: Math.round(cumulativeYield * 10) / 10,\n      dailyRevenue: Math.round(dailyRevenue),\n      cumulativeRevenue: Math.round(cumulativeRevenue),\n      dailyCost: Math.round(dailyCost),\n      cumulativeCost: Math.round(cumulativeCost),\n      profit: Math.round(profit),\n      efficiency: Math.round(efficiency * 10) / 10,\n      pricePerKg: Math.round(dailyPrice)\n    };\n  });\n};\n\n/**\n * 제어 데이터 보간 생성\n */\nexport const generateControlData = (farmCode, startDate, endDate) => {\n  const dates = generateDateRange(startDate, endDate, 'hour');\n  const farmInfo = FARM_CODES[farmCode];\n  \n  return dates.map(date => {\n    const hour = date.getHours();\n    const isDay = hour >= 6 && hour <= 18;\n    const season = getSeason(date);\n    \n    // 난방 제어 (겨울철, 야간에 주로 가동)\n    const heatingStatus = season === 'winter' && (!isDay || Math.random() < 0.3) ? 1 : 0;\n    const heatingSetpoint = season === 'winter' ? 20 + Math.random() * 5 : 18;\n    \n    // 환기 제어 (주간, 여름철에 주로 가동)\n    const ventilationStatus = (isDay && Math.random() < 0.7) || (season === 'summer' && Math.random() < 0.9) ? 1 : 0;\n    const ventilationRate = ventilationStatus ? 30 + Math.random() * 50 : 0;\n    \n    // 관수 제어 (정해진 시간에 가동)\n    const irrigationStatus = [6, 12, 18].includes(hour) && Math.random() < 0.8 ? 1 : 0;\n    \n    // 조명 제어 (겨울철 보광용)\n    const lightingStatus = season === 'winter' && [5, 6, 17, 18, 19].includes(hour) ? 1 : 0;\n    \n    return {\n      farmCode,\n      farmName: farmInfo.name,\n      region: farmInfo.region,\n      datetime: date.toISOString(),\n      date: date.toISOString().split('T')[0],\n      time: date.toTimeString().split(' ')[0],\n      heatingStatus,\n      ventilationStatus,\n      irrigationStatus,\n      lightingStatus,\n      heatingSetpoint: Math.round(heatingSetpoint * 10) / 10,\n      ventilationRate: Math.round(ventilationRate),\n      irrigationDuration: irrigationStatus ? 15 + Math.random() * 30 : 0, // 분 단위\n      lightingIntensity: lightingStatus ? 15000 + Math.random() * 10000 : 0\n    };\n  });\n};\n\n/**\n * 통합 데이터 생성\n */\nexport const generateIntegratedData = (filters = {}) => {\n  const {\n    farmCodes = Object.keys(FARM_CODES),\n    startDate = '2020-01-01',\n    endDate = '2021-12-31',\n    dataTypes = ['environment', 'growth', 'management', 'control']\n  } = filters;\n  \n  const result = {};\n  \n  farmCodes.forEach(farmCode => {\n    if (!FARM_CODES[farmCode]) return;\n    \n    result[farmCode] = {};\n    \n    if (dataTypes.includes('environment')) {\n      result[farmCode].environment = generateEnvironmentData(farmCode, startDate, endDate);\n    }\n    \n    if (dataTypes.includes('growth')) {\n      result[farmCode].growth = generateGrowthData(farmCode, startDate, endDate);\n    }\n    \n    if (dataTypes.includes('management')) {\n      result[farmCode].management = generateManagementData(farmCode, startDate, endDate);\n    }\n    \n    if (dataTypes.includes('control')) {\n      result[farmCode].control = generateControlData(farmCode, startDate, endDate);\n    }\n  });\n  \n  return result;\n};\n\n/**\n * 상관관계 계산\n */\nexport const calculateCorrelation = (data, xField, yField) => {\n  const validData = data.filter(d => \n    d[xField] !== null && d[xField] !== undefined &&\n    d[yField] !== null && d[yField] !== undefined\n  );\n  \n  if (validData.length < 2) return 0;\n  \n  const xMean = validData.reduce((sum, d) => sum + d[xField], 0) / validData.length;\n  const yMean = validData.reduce((sum, d) => sum + d[yField], 0) / validData.length;\n  \n  let numerator = 0;\n  let xSumSq = 0;\n  let ySumSq = 0;\n  \n  validData.forEach(d => {\n    const xDiff = d[xField] - xMean;\n    const yDiff = d[yField] - yMean;\n    numerator += xDiff * yDiff;\n    xSumSq += xDiff * xDiff;\n    ySumSq += yDiff * yDiff;\n  });\n  \n  const denominator = Math.sqrt(xSumSq * ySumSq);\n  return denominator === 0 ? 0 : numerator / denominator;\n};\n\n/**\n * 헬퍼 함수들\n */\nconst getSeason = (date) => {\n  const month = date.getMonth() + 1;\n  if (month >= 3 && month <= 5) return 'spring';\n  if (month >= 6 && month <= 8) return 'summer';\n  if (month >= 9 && month <= 11) return 'autumn';\n  return 'winter';\n};\n\nconst getGrowthStage = (week, totalWeeks) => {\n  const progress = week / totalWeeks;\n  if (progress < 0.2) return '발아기';\n  if (progress < 0.4) return '생장기';\n  if (progress < 0.6) return '개화기';\n  if (progress < 0.8) return '결실기';\n  return '수확기';\n};\n\n/**\n * 데이터 내보내기 (CSV 형식)\n */\nexport const exportToCSV = (data, filename) => {\n  if (!data || data.length === 0) return;\n  \n  const headers = Object.keys(data[0]);\n  const csvContent = [\n    headers.join(','),\n    ...data.map(row => headers.map(header => row[header]).join(','))\n  ].join('\\n');\n  \n  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n  const link = document.createElement('a');\n  const url = URL.createObjectURL(blob);\n  link.setAttribute('href', url);\n  link.setAttribute('download', filename);\n  link.style.visibility = 'hidden';\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}