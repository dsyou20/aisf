{"ast":null,"code":"/**\n * 실제 엑셀 데이터 읽기 및 보간 처리\n */\nimport * as XLSX from 'xlsx';\n\n// 엑셀 파일 경로 매핑 (실제 서버에서는 API로 처리)\nconst EXCEL_FILES = {\n  // 2020년 데이터\n  'PF_0021128_2020_environment': '/resources/2020_딸기_대구_PF_0021128_01/시설원예_시간기준_환경정보_2025.08.21.xlsx',\n  'PF_0021128_2020_growth': '/resources/2020_딸기_대구_PF_0021128_01/시설원예_생육정보_2025.08.21.xlsx',\n  'PF_0021128_2020_management': '/resources/2020_딸기_대구_PF_0021128_01/시설원예_경영정보_출하량_2025.08.21.xlsx',\n  'PF_0021128_2020_control': '/resources/2020_딸기_대구_PF_0021128_01/시설원예_시간기준_제어정보_2025.08.21.xlsx',\n  'PF_0010052_2020_environment': '/resources/2020_딸기_전남_PF_0010052_01/시설원예_시간기준_환경정보_2025.08.21.xlsx',\n  'PF_0010052_2020_growth': '/resources/2020_딸기_전남_PF_0010052_01/시설원예_생육정보_2025.08.21.xlsx',\n  'PF_0010052_2020_management': '/resources/2020_딸기_전남_PF_0010052_01/시설원예_경영정보_출하량_2025.08.21.xlsx',\n  'PF_0010052_2020_control': '/resources/2020_딸기_전남_PF_0010052_01/시설원예_시간기준_제어정보_2025.08.21.xlsx'\n\n  // 2021년 데이터 등...\n};\n\n/**\n * 엑셀 파일 읽기 (브라우저 환경에서는 fetch 사용)\n */\nexport const readExcelFile = async filePath => {\n  try {\n    // 실제 환경에서는 API 엔드포인트로 요청\n    const response = await fetch(filePath);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const arrayBuffer = await response.arrayBuffer();\n    const workbook = XLSX.read(arrayBuffer, {\n      type: 'array'\n    });\n    return workbook;\n  } catch (error) {\n    console.warn(`엑셀 파일 읽기 실패: ${filePath}`, error);\n    return null;\n  }\n};\n\n/**\n * 워크시트를 JSON으로 변환\n */\nexport const worksheetToJson = (worksheet, options = {}) => {\n  if (!worksheet) return [];\n  const {\n    header = 1,\n    range,\n    defval = null,\n    blankrows = true\n  } = options;\n  return XLSX.utils.sheet_to_json(worksheet, {\n    header,\n    range,\n    defval,\n    blankrows\n  });\n};\n\n/**\n * 환경 데이터 파싱 및 정제\n */\nexport const parseEnvironmentData = (rawData, farmCode, farmInfo) => {\n  if (!rawData || rawData.length === 0) return [];\n  return rawData.map(row => {\n    // 엑셀 컬럼명은 실제 파일에 따라 조정 필요\n    const datetime = parseExcelDate(row['일시'] || row['날짜'] || row['Date'] || row['DateTime']);\n    return {\n      farmCode,\n      farmName: farmInfo.name,\n      region: farmInfo.region,\n      datetime: datetime ? datetime.toISOString() : null,\n      date: datetime ? datetime.toISOString().split('T')[0] : null,\n      time: datetime ? datetime.toTimeString().split(' ')[0] : null,\n      temperature: parseFloat(row['온도'] || row['Temperature'] || row['내부온도']) || null,\n      humidity: parseFloat(row['습도'] || row['Humidity'] || row['내부습도']) || null,\n      co2: parseFloat(row['CO2'] || row['이산화탄소'] || row['CO2농도']) || null,\n      lightIntensity: parseFloat(row['조도'] || row['광량'] || row['Light']) || null,\n      soilMoisture: parseFloat(row['토양수분'] || row['SoilMoisture']) || null,\n      ph: parseFloat(row['pH'] || row['산도']) || null\n    };\n  }).filter(item => item.datetime); // 유효한 날짜가 있는 데이터만\n};\n\n/**\n * 생육 데이터 파싱 및 정제\n */\nexport const parseGrowthData = (rawData, farmCode, farmInfo) => {\n  if (!rawData || rawData.length === 0) return [];\n  return rawData.map(row => {\n    const date = parseExcelDate(row['조사일'] || row['날짜'] || row['Date']);\n    return {\n      farmCode,\n      farmName: farmInfo.name,\n      region: farmInfo.region,\n      date: date ? date.toISOString().split('T')[0] : null,\n      plantHeight: parseFloat(row['초장'] || row['PlantHeight'] || row['식물높이']) || null,\n      leafLength: parseFloat(row['엽장'] || row['LeafLength'] || row['잎길이']) || null,\n      leafWidth: parseFloat(row['엽폭'] || row['LeafWidth'] || row['잎너비']) || null,\n      stemDiameter: parseFloat(row['경경'] || row['StemDiameter'] || row['줄기직경']) || null,\n      fruitCount: parseInt(row['과실수'] || row['FruitCount'] || row['열매수']) || null,\n      fruitWeight: parseFloat(row['과중'] || row['FruitWeight'] || row['열매무게']) || null,\n      healthScore: parseFloat(row['건강도'] || row['HealthScore']) || null,\n      growthStage: row['생육단계'] || row['GrowthStage'] || '알 수 없음'\n    };\n  }).filter(item => item.date);\n};\n\n/**\n * 경영 데이터 파싱 및 정제\n */\nexport const parseManagementData = (rawData, farmCode, farmInfo) => {\n  if (!rawData || rawData.length === 0) return [];\n  return rawData.map(row => {\n    const date = parseExcelDate(row['출하일'] || row['날짜'] || row['Date']);\n    return {\n      farmCode,\n      farmName: farmInfo.name,\n      region: farmInfo.region,\n      date: date ? date.toISOString().split('T')[0] : null,\n      yieldAmount: parseFloat(row['출하량'] || row['수확량'] || row['YieldAmount']) || null,\n      revenue: parseFloat(row['매출'] || row['Revenue'] || row['판매금액']) || null,\n      cost: parseFloat(row['비용'] || row['Cost'] || row['생산비용']) || null,\n      profit: parseFloat(row['수익'] || row['Profit'] || row['순수익']) || null,\n      pricePerKg: parseFloat(row['단가'] || row['PricePerKg'] || row['kg당가격']) || null,\n      efficiency: parseFloat(row['효율성'] || row['Efficiency']) || null\n    };\n  }).filter(item => item.date);\n};\n\n/**\n * 제어 데이터 파싱 및 정제\n */\nexport const parseControlData = (rawData, farmCode, farmInfo) => {\n  if (!rawData || rawData.length === 0) return [];\n  return rawData.map(row => {\n    const datetime = parseExcelDate(row['일시'] || row['날짜'] || row['Date'] || row['DateTime']);\n    return {\n      farmCode,\n      farmName: farmInfo.name,\n      region: farmInfo.region,\n      datetime: datetime ? datetime.toISOString() : null,\n      date: datetime ? datetime.toISOString().split('T')[0] : null,\n      time: datetime ? datetime.toTimeString().split(' ')[0] : null,\n      heatingStatus: parseBooleanValue(row['난방상태'] || row['HeatingStatus']),\n      ventilationStatus: parseBooleanValue(row['환기상태'] || row['VentilationStatus']),\n      irrigationStatus: parseBooleanValue(row['관수상태'] || row['IrrigationStatus']),\n      lightingStatus: parseBooleanValue(row['조명상태'] || row['LightingStatus']),\n      heatingSetpoint: parseFloat(row['난방설정온도'] || row['HeatingSetpoint']) || null,\n      ventilationRate: parseFloat(row['환기율'] || row['VentilationRate']) || null\n    };\n  }).filter(item => item.datetime);\n};\n\n/**\n * 엑셀 날짜 파싱\n */\nconst parseExcelDate = dateValue => {\n  if (!dateValue) return null;\n\n  // 엑셀 시리얼 날짜인 경우\n  if (typeof dateValue === 'number') {\n    return XLSX.SSF.parse_date_code(dateValue);\n  }\n\n  // 문자열 날짜인 경우\n  if (typeof dateValue === 'string') {\n    const parsed = new Date(dateValue);\n    return isNaN(parsed.getTime()) ? null : parsed;\n  }\n\n  // Date 객체인 경우\n  if (dateValue instanceof Date) {\n    return dateValue;\n  }\n  return null;\n};\n\n/**\n * 불린 값 파싱\n */\nconst parseBooleanValue = value => {\n  if (typeof value === 'boolean') return value;\n  if (typeof value === 'number') return value > 0;\n  if (typeof value === 'string') {\n    const lower = value.toLowerCase();\n    return lower === 'true' || lower === '1' || lower === 'on' || lower === '켜짐';\n  }\n  return false;\n};\n\n/**\n * 데이터 보간 (Linear Interpolation)\n */\nexport const interpolateData = (data, field, method = 'linear') => {\n  if (!data || data.length === 0) return data;\n  const result = [...data];\n\n  // null 값의 인덱스 찾기\n  const nullIndices = [];\n  result.forEach((item, index) => {\n    if (item[field] === null || item[field] === undefined) {\n      nullIndices.push(index);\n    }\n  });\n  if (nullIndices.length === 0) return result;\n\n  // 선형 보간\n  if (method === 'linear') {\n    nullIndices.forEach(nullIndex => {\n      const prevValidIndex = findPreviousValidIndex(result, nullIndex, field);\n      const nextValidIndex = findNextValidIndex(result, nullIndex, field);\n      if (prevValidIndex !== -1 && nextValidIndex !== -1) {\n        const prevValue = result[prevValidIndex][field];\n        const nextValue = result[nextValidIndex][field];\n        const ratio = (nullIndex - prevValidIndex) / (nextValidIndex - prevValidIndex);\n        result[nullIndex][field] = prevValue + (nextValue - prevValue) * ratio;\n      } else if (prevValidIndex !== -1) {\n        // 앞의 값으로 채우기\n        result[nullIndex][field] = result[prevValidIndex][field];\n      } else if (nextValidIndex !== -1) {\n        // 뒤의 값으로 채우기\n        result[nullIndex][field] = result[nextValidIndex][field];\n      }\n    });\n  }\n\n  // 이동 평균 보간\n  else if (method === 'moving_average') {\n    const windowSize = 5; // 이동 평균 윈도우 크기\n\n    nullIndices.forEach(nullIndex => {\n      const values = [];\n      const start = Math.max(0, nullIndex - Math.floor(windowSize / 2));\n      const end = Math.min(result.length, nullIndex + Math.floor(windowSize / 2) + 1);\n      for (let i = start; i < end; i++) {\n        if (i !== nullIndex && result[i][field] !== null && result[i][field] !== undefined) {\n          values.push(result[i][field]);\n        }\n      }\n      if (values.length > 0) {\n        result[nullIndex][field] = values.reduce((sum, val) => sum + val, 0) / values.length;\n      }\n    });\n  }\n  return result;\n};\n\n/**\n * 이전 유효한 값의 인덱스 찾기\n */\nconst findPreviousValidIndex = (data, currentIndex, field) => {\n  for (let i = currentIndex - 1; i >= 0; i--) {\n    if (data[i][field] !== null && data[i][field] !== undefined) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/**\n * 다음 유효한 값의 인덱스 찾기\n */\nconst findNextValidIndex = (data, currentIndex, field) => {\n  for (let i = currentIndex + 1; i < data.length; i++) {\n    if (data[i][field] !== null && data[i][field] !== undefined) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/**\n * 다중 필드 보간\n */\nexport const interpolateMultipleFields = (data, fields, method = 'linear') => {\n  let result = data;\n  fields.forEach(field => {\n    result = interpolateData(result, field, method);\n  });\n  return result;\n};\n\n/**\n * 데이터 품질 분석\n */\nexport const analyzeDataQuality = (data, fields) => {\n  if (!data || data.length === 0) return {};\n  const analysis = {};\n  fields.forEach(field => {\n    const values = data.map(item => item[field]).filter(val => val !== null && val !== undefined);\n    const totalCount = data.length;\n    const validCount = values.length;\n    const missingCount = totalCount - validCount;\n    const missingRate = missingCount / totalCount * 100;\n    analysis[field] = {\n      totalCount,\n      validCount,\n      missingCount,\n      missingRate: Math.round(missingRate * 100) / 100,\n      completeness: Math.round(validCount / totalCount * 100 * 100) / 100\n    };\n  });\n  return analysis;\n};\n\n/**\n * 이상치 탐지 및 처리\n */\nexport const detectAndHandleOutliers = (data, field, method = 'iqr', action = 'flag') => {\n  const values = data.map(item => item[field]).filter(val => val !== null && val !== undefined);\n  if (values.length === 0) return data;\n  let outlierIndices = [];\n  if (method === 'iqr') {\n    // IQR 방법\n    values.sort((a, b) => a - b);\n    const q1 = values[Math.floor(values.length * 0.25)];\n    const q3 = values[Math.floor(values.length * 0.75)];\n    const iqr = q3 - q1;\n    const lowerBound = q1 - 1.5 * iqr;\n    const upperBound = q3 + 1.5 * iqr;\n    data.forEach((item, index) => {\n      const value = item[field];\n      if (value !== null && value !== undefined && (value < lowerBound || value > upperBound)) {\n        outlierIndices.push(index);\n      }\n    });\n  }\n\n  // 이상치 처리\n  const result = [...data];\n  if (action === 'remove') {\n    // 이상치 제거\n    return result.filter((_, index) => !outlierIndices.includes(index));\n  } else if (action === 'cap') {\n    // 이상치 캡핑\n    const median = values[Math.floor(values.length / 2)];\n    outlierIndices.forEach(index => {\n      result[index][field] = median;\n    });\n  } else if (action === 'flag') {\n    // 이상치 플래그만 추가\n    outlierIndices.forEach(index => {\n      result[index][`${field}_outlier`] = true;\n    });\n  }\n  return result;\n};","map":{"version":3,"names":["XLSX","EXCEL_FILES","readExcelFile","filePath","response","fetch","ok","Error","status","arrayBuffer","workbook","read","type","error","console","warn","worksheetToJson","worksheet","options","header","range","defval","blankrows","utils","sheet_to_json","parseEnvironmentData","rawData","farmCode","farmInfo","length","map","row","datetime","parseExcelDate","farmName","name","region","toISOString","date","split","time","toTimeString","temperature","parseFloat","humidity","co2","lightIntensity","soilMoisture","ph","filter","item","parseGrowthData","plantHeight","leafLength","leafWidth","stemDiameter","fruitCount","parseInt","fruitWeight","healthScore","growthStage","parseManagementData","yieldAmount","revenue","cost","profit","pricePerKg","efficiency","parseControlData","heatingStatus","parseBooleanValue","ventilationStatus","irrigationStatus","lightingStatus","heatingSetpoint","ventilationRate","dateValue","SSF","parse_date_code","parsed","Date","isNaN","getTime","value","lower","toLowerCase","interpolateData","data","field","method","result","nullIndices","forEach","index","undefined","push","nullIndex","prevValidIndex","findPreviousValidIndex","nextValidIndex","findNextValidIndex","prevValue","nextValue","ratio","windowSize","values","start","Math","max","floor","end","min","i","reduce","sum","val","currentIndex","interpolateMultipleFields","fields","analyzeDataQuality","analysis","totalCount","validCount","missingCount","missingRate","round","completeness","detectAndHandleOutliers","action","outlierIndices","sort","a","b","q1","q3","iqr","lowerBound","upperBound","_","includes","median"],"sources":["/DATA1/elcom/aisf2/aisf/frontend/src/utils/excelReader.js"],"sourcesContent":["/**\n * 실제 엑셀 데이터 읽기 및 보간 처리\n */\nimport * as XLSX from 'xlsx';\n\n// 엑셀 파일 경로 매핑 (실제 서버에서는 API로 처리)\nconst EXCEL_FILES = {\n  // 2020년 데이터\n  'PF_0021128_2020_environment': '/resources/2020_딸기_대구_PF_0021128_01/시설원예_시간기준_환경정보_2025.08.21.xlsx',\n  'PF_0021128_2020_growth': '/resources/2020_딸기_대구_PF_0021128_01/시설원예_생육정보_2025.08.21.xlsx',\n  'PF_0021128_2020_management': '/resources/2020_딸기_대구_PF_0021128_01/시설원예_경영정보_출하량_2025.08.21.xlsx',\n  'PF_0021128_2020_control': '/resources/2020_딸기_대구_PF_0021128_01/시설원예_시간기준_제어정보_2025.08.21.xlsx',\n  \n  'PF_0010052_2020_environment': '/resources/2020_딸기_전남_PF_0010052_01/시설원예_시간기준_환경정보_2025.08.21.xlsx',\n  'PF_0010052_2020_growth': '/resources/2020_딸기_전남_PF_0010052_01/시설원예_생육정보_2025.08.21.xlsx',\n  'PF_0010052_2020_management': '/resources/2020_딸기_전남_PF_0010052_01/시설원예_경영정보_출하량_2025.08.21.xlsx',\n  'PF_0010052_2020_control': '/resources/2020_딸기_전남_PF_0010052_01/시설원예_시간기준_제어정보_2025.08.21.xlsx',\n  \n  // 2021년 데이터 등...\n};\n\n/**\n * 엑셀 파일 읽기 (브라우저 환경에서는 fetch 사용)\n */\nexport const readExcelFile = async (filePath) => {\n  try {\n    // 실제 환경에서는 API 엔드포인트로 요청\n    const response = await fetch(filePath);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    \n    const arrayBuffer = await response.arrayBuffer();\n    const workbook = XLSX.read(arrayBuffer, { type: 'array' });\n    \n    return workbook;\n  } catch (error) {\n    console.warn(`엑셀 파일 읽기 실패: ${filePath}`, error);\n    return null;\n  }\n};\n\n/**\n * 워크시트를 JSON으로 변환\n */\nexport const worksheetToJson = (worksheet, options = {}) => {\n  if (!worksheet) return [];\n  \n  const {\n    header = 1,\n    range,\n    defval = null,\n    blankrows = true\n  } = options;\n  \n  return XLSX.utils.sheet_to_json(worksheet, {\n    header,\n    range,\n    defval,\n    blankrows\n  });\n};\n\n/**\n * 환경 데이터 파싱 및 정제\n */\nexport const parseEnvironmentData = (rawData, farmCode, farmInfo) => {\n  if (!rawData || rawData.length === 0) return [];\n  \n  return rawData.map(row => {\n    // 엑셀 컬럼명은 실제 파일에 따라 조정 필요\n    const datetime = parseExcelDate(row['일시'] || row['날짜'] || row['Date'] || row['DateTime']);\n    \n    return {\n      farmCode,\n      farmName: farmInfo.name,\n      region: farmInfo.region,\n      datetime: datetime ? datetime.toISOString() : null,\n      date: datetime ? datetime.toISOString().split('T')[0] : null,\n      time: datetime ? datetime.toTimeString().split(' ')[0] : null,\n      temperature: parseFloat(row['온도'] || row['Temperature'] || row['내부온도']) || null,\n      humidity: parseFloat(row['습도'] || row['Humidity'] || row['내부습도']) || null,\n      co2: parseFloat(row['CO2'] || row['이산화탄소'] || row['CO2농도']) || null,\n      lightIntensity: parseFloat(row['조도'] || row['광량'] || row['Light']) || null,\n      soilMoisture: parseFloat(row['토양수분'] || row['SoilMoisture']) || null,\n      ph: parseFloat(row['pH'] || row['산도']) || null\n    };\n  }).filter(item => item.datetime); // 유효한 날짜가 있는 데이터만\n};\n\n/**\n * 생육 데이터 파싱 및 정제\n */\nexport const parseGrowthData = (rawData, farmCode, farmInfo) => {\n  if (!rawData || rawData.length === 0) return [];\n  \n  return rawData.map(row => {\n    const date = parseExcelDate(row['조사일'] || row['날짜'] || row['Date']);\n    \n    return {\n      farmCode,\n      farmName: farmInfo.name,\n      region: farmInfo.region,\n      date: date ? date.toISOString().split('T')[0] : null,\n      plantHeight: parseFloat(row['초장'] || row['PlantHeight'] || row['식물높이']) || null,\n      leafLength: parseFloat(row['엽장'] || row['LeafLength'] || row['잎길이']) || null,\n      leafWidth: parseFloat(row['엽폭'] || row['LeafWidth'] || row['잎너비']) || null,\n      stemDiameter: parseFloat(row['경경'] || row['StemDiameter'] || row['줄기직경']) || null,\n      fruitCount: parseInt(row['과실수'] || row['FruitCount'] || row['열매수']) || null,\n      fruitWeight: parseFloat(row['과중'] || row['FruitWeight'] || row['열매무게']) || null,\n      healthScore: parseFloat(row['건강도'] || row['HealthScore']) || null,\n      growthStage: row['생육단계'] || row['GrowthStage'] || '알 수 없음'\n    };\n  }).filter(item => item.date);\n};\n\n/**\n * 경영 데이터 파싱 및 정제\n */\nexport const parseManagementData = (rawData, farmCode, farmInfo) => {\n  if (!rawData || rawData.length === 0) return [];\n  \n  return rawData.map(row => {\n    const date = parseExcelDate(row['출하일'] || row['날짜'] || row['Date']);\n    \n    return {\n      farmCode,\n      farmName: farmInfo.name,\n      region: farmInfo.region,\n      date: date ? date.toISOString().split('T')[0] : null,\n      yieldAmount: parseFloat(row['출하량'] || row['수확량'] || row['YieldAmount']) || null,\n      revenue: parseFloat(row['매출'] || row['Revenue'] || row['판매금액']) || null,\n      cost: parseFloat(row['비용'] || row['Cost'] || row['생산비용']) || null,\n      profit: parseFloat(row['수익'] || row['Profit'] || row['순수익']) || null,\n      pricePerKg: parseFloat(row['단가'] || row['PricePerKg'] || row['kg당가격']) || null,\n      efficiency: parseFloat(row['효율성'] || row['Efficiency']) || null\n    };\n  }).filter(item => item.date);\n};\n\n/**\n * 제어 데이터 파싱 및 정제\n */\nexport const parseControlData = (rawData, farmCode, farmInfo) => {\n  if (!rawData || rawData.length === 0) return [];\n  \n  return rawData.map(row => {\n    const datetime = parseExcelDate(row['일시'] || row['날짜'] || row['Date'] || row['DateTime']);\n    \n    return {\n      farmCode,\n      farmName: farmInfo.name,\n      region: farmInfo.region,\n      datetime: datetime ? datetime.toISOString() : null,\n      date: datetime ? datetime.toISOString().split('T')[0] : null,\n      time: datetime ? datetime.toTimeString().split(' ')[0] : null,\n      heatingStatus: parseBooleanValue(row['난방상태'] || row['HeatingStatus']),\n      ventilationStatus: parseBooleanValue(row['환기상태'] || row['VentilationStatus']),\n      irrigationStatus: parseBooleanValue(row['관수상태'] || row['IrrigationStatus']),\n      lightingStatus: parseBooleanValue(row['조명상태'] || row['LightingStatus']),\n      heatingSetpoint: parseFloat(row['난방설정온도'] || row['HeatingSetpoint']) || null,\n      ventilationRate: parseFloat(row['환기율'] || row['VentilationRate']) || null\n    };\n  }).filter(item => item.datetime);\n};\n\n/**\n * 엑셀 날짜 파싱\n */\nconst parseExcelDate = (dateValue) => {\n  if (!dateValue) return null;\n  \n  // 엑셀 시리얼 날짜인 경우\n  if (typeof dateValue === 'number') {\n    return XLSX.SSF.parse_date_code(dateValue);\n  }\n  \n  // 문자열 날짜인 경우\n  if (typeof dateValue === 'string') {\n    const parsed = new Date(dateValue);\n    return isNaN(parsed.getTime()) ? null : parsed;\n  }\n  \n  // Date 객체인 경우\n  if (dateValue instanceof Date) {\n    return dateValue;\n  }\n  \n  return null;\n};\n\n/**\n * 불린 값 파싱\n */\nconst parseBooleanValue = (value) => {\n  if (typeof value === 'boolean') return value;\n  if (typeof value === 'number') return value > 0;\n  if (typeof value === 'string') {\n    const lower = value.toLowerCase();\n    return lower === 'true' || lower === '1' || lower === 'on' || lower === '켜짐';\n  }\n  return false;\n};\n\n/**\n * 데이터 보간 (Linear Interpolation)\n */\nexport const interpolateData = (data, field, method = 'linear') => {\n  if (!data || data.length === 0) return data;\n  \n  const result = [...data];\n  \n  // null 값의 인덱스 찾기\n  const nullIndices = [];\n  result.forEach((item, index) => {\n    if (item[field] === null || item[field] === undefined) {\n      nullIndices.push(index);\n    }\n  });\n  \n  if (nullIndices.length === 0) return result;\n  \n  // 선형 보간\n  if (method === 'linear') {\n    nullIndices.forEach(nullIndex => {\n      const prevValidIndex = findPreviousValidIndex(result, nullIndex, field);\n      const nextValidIndex = findNextValidIndex(result, nullIndex, field);\n      \n      if (prevValidIndex !== -1 && nextValidIndex !== -1) {\n        const prevValue = result[prevValidIndex][field];\n        const nextValue = result[nextValidIndex][field];\n        const ratio = (nullIndex - prevValidIndex) / (nextValidIndex - prevValidIndex);\n        \n        result[nullIndex][field] = prevValue + (nextValue - prevValue) * ratio;\n      } else if (prevValidIndex !== -1) {\n        // 앞의 값으로 채우기\n        result[nullIndex][field] = result[prevValidIndex][field];\n      } else if (nextValidIndex !== -1) {\n        // 뒤의 값으로 채우기\n        result[nullIndex][field] = result[nextValidIndex][field];\n      }\n    });\n  }\n  \n  // 이동 평균 보간\n  else if (method === 'moving_average') {\n    const windowSize = 5; // 이동 평균 윈도우 크기\n    \n    nullIndices.forEach(nullIndex => {\n      const values = [];\n      const start = Math.max(0, nullIndex - Math.floor(windowSize / 2));\n      const end = Math.min(result.length, nullIndex + Math.floor(windowSize / 2) + 1);\n      \n      for (let i = start; i < end; i++) {\n        if (i !== nullIndex && result[i][field] !== null && result[i][field] !== undefined) {\n          values.push(result[i][field]);\n        }\n      }\n      \n      if (values.length > 0) {\n        result[nullIndex][field] = values.reduce((sum, val) => sum + val, 0) / values.length;\n      }\n    });\n  }\n  \n  return result;\n};\n\n/**\n * 이전 유효한 값의 인덱스 찾기\n */\nconst findPreviousValidIndex = (data, currentIndex, field) => {\n  for (let i = currentIndex - 1; i >= 0; i--) {\n    if (data[i][field] !== null && data[i][field] !== undefined) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/**\n * 다음 유효한 값의 인덱스 찾기\n */\nconst findNextValidIndex = (data, currentIndex, field) => {\n  for (let i = currentIndex + 1; i < data.length; i++) {\n    if (data[i][field] !== null && data[i][field] !== undefined) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/**\n * 다중 필드 보간\n */\nexport const interpolateMultipleFields = (data, fields, method = 'linear') => {\n  let result = data;\n  \n  fields.forEach(field => {\n    result = interpolateData(result, field, method);\n  });\n  \n  return result;\n};\n\n/**\n * 데이터 품질 분석\n */\nexport const analyzeDataQuality = (data, fields) => {\n  if (!data || data.length === 0) return {};\n  \n  const analysis = {};\n  \n  fields.forEach(field => {\n    const values = data.map(item => item[field]).filter(val => val !== null && val !== undefined);\n    const totalCount = data.length;\n    const validCount = values.length;\n    const missingCount = totalCount - validCount;\n    const missingRate = (missingCount / totalCount) * 100;\n    \n    analysis[field] = {\n      totalCount,\n      validCount,\n      missingCount,\n      missingRate: Math.round(missingRate * 100) / 100,\n      completeness: Math.round(((validCount / totalCount) * 100) * 100) / 100\n    };\n  });\n  \n  return analysis;\n};\n\n/**\n * 이상치 탐지 및 처리\n */\nexport const detectAndHandleOutliers = (data, field, method = 'iqr', action = 'flag') => {\n  const values = data.map(item => item[field]).filter(val => val !== null && val !== undefined);\n  if (values.length === 0) return data;\n  \n  let outlierIndices = [];\n  \n  if (method === 'iqr') {\n    // IQR 방법\n    values.sort((a, b) => a - b);\n    const q1 = values[Math.floor(values.length * 0.25)];\n    const q3 = values[Math.floor(values.length * 0.75)];\n    const iqr = q3 - q1;\n    const lowerBound = q1 - 1.5 * iqr;\n    const upperBound = q3 + 1.5 * iqr;\n    \n    data.forEach((item, index) => {\n      const value = item[field];\n      if (value !== null && value !== undefined && (value < lowerBound || value > upperBound)) {\n        outlierIndices.push(index);\n      }\n    });\n  }\n  \n  // 이상치 처리\n  const result = [...data];\n  if (action === 'remove') {\n    // 이상치 제거\n    return result.filter((_, index) => !outlierIndices.includes(index));\n  } else if (action === 'cap') {\n    // 이상치 캡핑\n    const median = values[Math.floor(values.length / 2)];\n    outlierIndices.forEach(index => {\n      result[index][field] = median;\n    });\n  } else if (action === 'flag') {\n    // 이상치 플래그만 추가\n    outlierIndices.forEach(index => {\n      result[index][`${field}_outlier`] = true;\n    });\n  }\n  \n  return result;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}