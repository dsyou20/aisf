{"ast":null,"code":"/**\n * 생육 환경 예측 및 의사결정 엔진\n * 미래 환경 변화 예측과 선제적 조치사항 추천\n */\n\nimport { ENVIRONMENT_SENSORS, GROWTH_STAGES } from './greenhouseSimulator';\nimport { DETAILED_SIMULATION_SCENARIOS } from './detailedScenarios';\n\n/**\n * 미래 환경 예측 엔진\n */\nexport class EnvironmentPredictionEngine {\n  constructor() {\n    this.historicalData = [];\n    this.weatherPatterns = this.initializeWeatherPatterns();\n    this.seasonalTrends = this.initializeSeasonalTrends();\n  }\n\n  /**\n   * 7일간 환경 예측\n   */\n  predict7DayEnvironment(currentEnvironment, externalFactors = {}) {\n    const predictions = [];\n    const baseDate = new Date();\n    for (let day = 1; day <= 7; day++) {\n      const futureDate = new Date(baseDate.getTime() + day * 24 * 60 * 60 * 1000);\n      const prediction = this.predictSingleDay(currentEnvironment, futureDate, day, externalFactors);\n      predictions.push(prediction);\n    }\n    return predictions;\n  }\n\n  /**\n   * 단일 날짜 환경 예측\n   */\n  predictSingleDay(baseEnvironment, targetDate, daysAhead, externalFactors) {\n    const seasonalEffect = this.calculateSeasonalEffect(targetDate);\n    const weatherEffect = this.calculateWeatherEffect(daysAhead, externalFactors);\n    const trendEffect = this.calculateTrendEffect(daysAhead);\n    const randomVariation = this.calculateRandomVariation(daysAhead);\n    return {\n      date: targetDate.toISOString().split('T')[0],\n      daysAhead,\n      temperature: this.applyPredictionFactors(baseEnvironment.temperature, [seasonalEffect.temperature, weatherEffect.temperature, trendEffect.temperature, randomVariation.temperature]),\n      humidity: this.applyPredictionFactors(baseEnvironment.humidity, [seasonalEffect.humidity, weatherEffect.humidity, trendEffect.humidity, randomVariation.humidity]),\n      lightIntensity: this.applyPredictionFactors(baseEnvironment.lightIntensity, [seasonalEffect.lightIntensity, weatherEffect.lightIntensity, trendEffect.lightIntensity, randomVariation.lightIntensity]),\n      soilMoisture: this.applyPredictionFactors(baseEnvironment.soilMoisture, [seasonalEffect.soilMoisture, weatherEffect.soilMoisture, trendEffect.soilMoisture, randomVariation.soilMoisture]),\n      co2: this.applyPredictionFactors(baseEnvironment.co2, [seasonalEffect.co2, weatherEffect.co2, trendEffect.co2, randomVariation.co2]),\n      confidence: Math.max(0.3, 0.95 - daysAhead * 0.1),\n      // 예측 신뢰도\n      weatherCondition: weatherEffect.condition\n    };\n  }\n\n  /**\n   * 계절적 영향 계산\n   */\n  calculateSeasonalEffect(date) {\n    const month = date.getMonth() + 1;\n    const dayOfYear = Math.floor((date - new Date(date.getFullYear(), 0, 0)) / 86400000);\n\n    // 계절별 기본 패턴\n    const tempCycle = Math.sin(dayOfYear / 365 * 2 * Math.PI) * 8;\n    const humidityCycle = Math.cos(dayOfYear / 365 * 2 * Math.PI) * 10;\n    const lightCycle = Math.sin(dayOfYear / 365 * 2 * Math.PI + Math.PI / 2) * 0.3;\n    return {\n      temperature: tempCycle,\n      humidity: humidityCycle,\n      lightIntensity: 1 + lightCycle,\n      soilMoisture: month >= 6 && month <= 8 ? -5 : 3,\n      // 여름철 증발량 증가\n      co2: month >= 11 || month <= 2 ? 50 : -30 // 겨울철 환기 감소로 CO2 증가\n    };\n  }\n\n  /**\n   * 기상 영향 계산\n   */\n  calculateWeatherEffect(daysAhead, externalFactors) {\n    const {\n      weatherForecast = 'normal',\n      externalTemperature = 20,\n      precipitation = 0,\n      windSpeed = 2,\n      cloudCover = 0.3\n    } = externalFactors;\n    let tempEffect = 0;\n    let humidityEffect = 0;\n    let lightEffect = 1;\n    let soilMoistureEffect = 0;\n    let co2Effect = 0;\n    let condition = '맑음';\n    switch (weatherForecast) {\n      case 'sunny':\n        tempEffect = 2;\n        humidityEffect = -5;\n        lightEffect = 1.2;\n        condition = '맑음';\n        break;\n      case 'cloudy':\n        tempEffect = -1;\n        humidityEffect = 5;\n        lightEffect = 0.6;\n        condition = '흐림';\n        break;\n      case 'rainy':\n        tempEffect = -3;\n        humidityEffect = 15;\n        lightEffect = 0.4;\n        soilMoistureEffect = 10;\n        condition = '비';\n        break;\n      case 'storm':\n        tempEffect = -5;\n        humidityEffect = 25;\n        lightEffect = 0.3;\n        soilMoistureEffect = 20;\n        co2Effect = -100;\n        condition = '폭풍';\n        break;\n      default:\n        condition = '보통';\n    }\n\n    // 외부 온도 영향 (온실은 외부 온도의 30% 영향)\n    tempEffect += (externalTemperature - 20) * 0.3;\n    return {\n      temperature: tempEffect,\n      humidity: humidityEffect,\n      lightIntensity: lightEffect,\n      soilMoisture: soilMoistureEffect,\n      co2: co2Effect,\n      condition\n    };\n  }\n\n  /**\n   * 트렌드 영향 계산 (연속적 변화)\n   */\n  calculateTrendEffect(daysAhead) {\n    // 시간이 지날수록 누적되는 변화\n    return {\n      temperature: 0.1 * daysAhead,\n      humidity: -0.2 * daysAhead,\n      lightIntensity: 1 + 0.01 * daysAhead,\n      soilMoisture: -0.5 * daysAhead,\n      co2: 5 * daysAhead\n    };\n  }\n\n  /**\n   * 랜덤 변동 계산\n   */\n  calculateRandomVariation(daysAhead) {\n    const uncertainty = Math.min(0.3, 0.05 * daysAhead); // 예측 불확실성\n\n    return {\n      temperature: (Math.random() - 0.5) * 4 * uncertainty,\n      humidity: (Math.random() - 0.5) * 10 * uncertainty,\n      lightIntensity: 1 + (Math.random() - 0.5) * 0.2 * uncertainty,\n      soilMoisture: (Math.random() - 0.5) * 8 * uncertainty,\n      co2: (Math.random() - 0.5) * 100 * uncertainty\n    };\n  }\n\n  /**\n   * 예측 인자들을 종합하여 최종 값 계산\n   */\n  applyPredictionFactors(baseValue, factors) {\n    let result = baseValue;\n    factors.forEach(factor => {\n      if (typeof factor === 'number') {\n        result += factor;\n      } else if (typeof factor === 'object' && factor.multiplier) {\n        result *= factor.multiplier;\n      }\n    });\n    return Math.round(result * 10) / 10;\n  }\n\n  /**\n   * 기상 패턴 초기화\n   */\n  initializeWeatherPatterns() {\n    return {\n      spring: {\n        temp: [15, 25],\n        humidity: [50, 70],\n        precipitation: 0.3\n      },\n      summer: {\n        temp: [25, 35],\n        humidity: [60, 80],\n        precipitation: 0.4\n      },\n      autumn: {\n        temp: [10, 20],\n        humidity: [55, 75],\n        precipitation: 0.2\n      },\n      winter: {\n        temp: [0, 10],\n        humidity: [45, 65],\n        precipitation: 0.1\n      }\n    };\n  }\n\n  /**\n   * 계절 트렌드 초기화\n   */\n  initializeSeasonalTrends() {\n    return {\n      temperatureAmplitude: 15,\n      // 연간 온도 변화폭\n      humidityAmplitude: 20,\n      // 연간 습도 변화폭\n      lightAmplitude: 0.4 // 연간 광량 변화폭\n    };\n  }\n}\n\n/**\n * 작업 예측 및 스케줄링 엔진\n */\nexport class ActionPredictionEngine {\n  constructor() {\n    this.actionHistory = [];\n    this.cropCalendar = this.initializeCropCalendar();\n  }\n\n  /**\n   * 미래 필요 작업 예측\n   */\n  predictFutureActions(environmentPredictions, currentWeek, currentGrowthStage) {\n    const actionSchedule = [];\n    environmentPredictions.forEach((prediction, index) => {\n      const day = index + 1;\n      const actions = [];\n\n      // 환경 기반 즉시 조치사항\n      const environmentActions = this.analyzeEnvironmentActions(prediction);\n\n      // 생육 단계 기반 정기 작업\n      const stageActions = this.analyzeStageActions(currentWeek + Math.floor(day / 7), day);\n\n      // 예방적 조치사항\n      const preventiveActions = this.analyzePreventiveActions(prediction, day);\n      actions.push(...environmentActions, ...stageActions, ...preventiveActions);\n      if (actions.length > 0) {\n        actionSchedule.push({\n          date: prediction.date,\n          day: day,\n          confidence: prediction.confidence,\n          actions: this.prioritizeActions(actions),\n          totalCost: this.calculateDayCost(actions),\n          workload: this.calculateWorkload(actions)\n        });\n      }\n    });\n    return actionSchedule;\n  }\n\n  /**\n   * 환경 조건 기반 조치사항 분석\n   */\n  analyzeEnvironmentActions(prediction) {\n    const actions = [];\n    Object.keys(ENVIRONMENT_SENSORS).forEach(sensor => {\n      const sensorData = ENVIRONMENT_SENSORS[sensor];\n      const value = prediction[sensor];\n      if (!value) return;\n      if (value < sensorData.optimal[0]) {\n        actions.push({\n          type: 'environment',\n          sensor: sensor,\n          issue: 'below_optimal',\n          description: `${sensorData.description}이 최적 범위보다 낮습니다 (${value}${sensorData.unit})`,\n          action: this.getActionForLowValue(sensor),\n          urgency: value < sensorData.criticalLow ? 'critical' : 'high',\n          estimatedDuration: this.getActionDuration(sensor, 'low'),\n          estimatedCost: this.getActionCost(sensor, 'low')\n        });\n      } else if (value > sensorData.optimal[1]) {\n        actions.push({\n          type: 'environment',\n          sensor: sensor,\n          issue: 'above_optimal',\n          description: `${sensorData.description}이 최적 범위보다 높습니다 (${value}${sensorData.unit})`,\n          action: this.getActionForHighValue(sensor),\n          urgency: value > sensorData.criticalHigh ? 'critical' : 'high',\n          estimatedDuration: this.getActionDuration(sensor, 'high'),\n          estimatedCost: this.getActionCost(sensor, 'high')\n        });\n      }\n    });\n    return actions;\n  }\n\n  /**\n   * 생육 단계 기반 정기 작업 분석\n   */\n  analyzeStageActions(week, day) {\n    const actions = [];\n    const stage = this.getCurrentStageByWeek(week);\n    if (!stage) return actions;\n\n    // 주간 정기 작업\n    if (day % 7 === 1) {\n      // 매주 월요일\n      actions.push({\n        type: 'routine',\n        category: 'weekly_inspection',\n        description: `${stage.stage} 단계 주간 점검`,\n        action: '생육 상태 관찰 및 기록',\n        urgency: 'low',\n        estimatedDuration: '30분',\n        estimatedCost: 0\n      });\n    }\n\n    // 생육 단계별 특수 작업\n    stage.targetActions.forEach(targetAction => {\n      const scheduledAction = this.getScheduledAction(targetAction, week, day);\n      if (scheduledAction) {\n        actions.push(scheduledAction);\n      }\n    });\n    return actions;\n  }\n\n  /**\n   * 예방적 조치사항 분석\n   */\n  analyzePreventiveActions(prediction, day) {\n    const actions = [];\n\n    // 병해충 예방\n    if (prediction.humidity > 80 && prediction.temperature > 20) {\n      actions.push({\n        type: 'preventive',\n        category: 'disease_prevention',\n        description: '고온다습 조건으로 곰팡이병 발생 위험 증가',\n        action: '예방적 환기 강화 및 방제제 살포 준비',\n        urgency: 'medium',\n        estimatedDuration: '1시간',\n        estimatedCost: 15000\n      });\n    }\n\n    // 스트레스 예방\n    if (Math.abs(prediction.temperature - 22) > 5) {\n      actions.push({\n        type: 'preventive',\n        category: 'stress_prevention',\n        description: '온도 스트레스 예방 필요',\n        action: '온도 제어 시스템 점검 및 대비',\n        urgency: 'medium',\n        estimatedDuration: '45분',\n        estimatedCost: 5000\n      });\n    }\n    return actions;\n  }\n\n  /**\n   * 작업 우선순위 결정\n   */\n  prioritizeActions(actions) {\n    const urgencyOrder = {\n      critical: 4,\n      high: 3,\n      medium: 2,\n      low: 1\n    };\n    return actions.sort((a, b) => {\n      // 1차: 긴급도\n      const urgencyDiff = urgencyOrder[b.urgency] - urgencyOrder[a.urgency];\n      if (urgencyDiff !== 0) return urgencyDiff;\n\n      // 2차: 비용 효율성 (낮은 비용 우선)\n      return a.estimatedCost - b.estimatedCost;\n    });\n  }\n\n  /**\n   * 낮은 값에 대한 조치사항\n   */\n  getActionForLowValue(sensor) {\n    const actionMap = {\n      temperature: '난방 시스템 가동',\n      humidity: '가습기 운전 또는 미스트 분무',\n      soilMoisture: '관수 실시',\n      lightIntensity: 'LED 보광등 가동',\n      co2: 'CO2 발생기 가동',\n      soilPH: '석회 시용으로 pH 상승',\n      windSpeed: '환기팬 가동'\n    };\n    return actionMap[sensor] || '전문가 상담';\n  }\n\n  /**\n   * 높은 값에 대한 조치사항\n   */\n  getActionForHighValue(sensor) {\n    const actionMap = {\n      temperature: '환기 강화 또는 차광막 설치',\n      humidity: '제습기 가동 또는 환기 강화',\n      soilMoisture: '배수 개선 및 관수 중단',\n      lightIntensity: '차광막 설치',\n      co2: '환기 강화로 CO2 배출',\n      soilPH: '황산 처리로 pH 하강',\n      windSpeed: '환기 조절'\n    };\n    return actionMap[sensor] || '전문가 상담';\n  }\n\n  /**\n   * 작업 소요 시간 추정\n   */\n  getActionDuration(sensor, direction) {\n    var _durationMap$sensor;\n    const durationMap = {\n      temperature: {\n        low: '2-4시간',\n        high: '1-3시간'\n      },\n      humidity: {\n        low: '30분-1시간',\n        high: '1-2시간'\n      },\n      soilMoisture: {\n        low: '15-30분',\n        high: '4-8시간'\n      },\n      lightIntensity: {\n        low: '즉시',\n        high: '30분'\n      },\n      co2: {\n        low: '즉시',\n        high: '30분'\n      }\n    };\n    return ((_durationMap$sensor = durationMap[sensor]) === null || _durationMap$sensor === void 0 ? void 0 : _durationMap$sensor[direction]) || '1시간';\n  }\n\n  /**\n   * 작업 비용 추정\n   */\n  getActionCost(sensor, direction) {\n    var _costMap$sensor;\n    const costMap = {\n      temperature: {\n        low: 25000,\n        high: 8000\n      },\n      humidity: {\n        low: 5000,\n        high: 12000\n      },\n      soilMoisture: {\n        low: 3000,\n        high: 2000\n      },\n      lightIntensity: {\n        low: 20000,\n        high: 5000\n      },\n      co2: {\n        low: 15000,\n        high: 3000\n      }\n    };\n    return ((_costMap$sensor = costMap[sensor]) === null || _costMap$sensor === void 0 ? void 0 : _costMap$sensor[direction]) || 10000;\n  }\n\n  /**\n   * 현재 주차의 생육 단계 조회\n   */\n  getCurrentStageByWeek(week) {\n    const strawberryStages = GROWTH_STAGES.strawberry;\n    return strawberryStages.find(stage => week >= stage.weeks[0] && week <= stage.weeks[1]);\n  }\n\n  /**\n   * 예정된 작업 조회\n   */\n  getScheduledAction(targetAction, week, day) {\n    const actionSchedule = {\n      '정식': {\n        weeks: [1],\n        description: '딸기 묘 정식 작업'\n      },\n      '활착관리': {\n        weeks: [1, 2],\n        description: '정식 후 활착 관리'\n      },\n      '관수관리': {\n        weeks: [5, 12],\n        frequency: 'daily',\n        description: '영양생장기 관수 관리'\n      },\n      '온도관리': {\n        weeks: [5, 28],\n        frequency: 'continuous',\n        description: '최적 온도 유지'\n      },\n      '병해예방': {\n        weeks: [8, 40],\n        frequency: 'weekly',\n        description: '병해충 예방 점검'\n      },\n      '저온처리': {\n        weeks: [13, 16],\n        description: '화아분화 촉진을 위한 저온 처리'\n      },\n      '수분관리': {\n        weeks: [21, 28],\n        description: '개화기 수분 관리'\n      },\n      '과실관리': {\n        weeks: [29, 40],\n        frequency: 'daily',\n        description: '과실 솎기 및 관리'\n      },\n      '수확': {\n        weeks: [35, 52],\n        frequency: 'daily',\n        description: '성숙 과실 수확'\n      }\n    };\n    const schedule = actionSchedule[targetAction];\n    if (!schedule) return null;\n    const isInWeekRange = schedule.weeks.length === 1 ? week === schedule.weeks[0] : week >= schedule.weeks[0] && week <= schedule.weeks[1];\n    if (!isInWeekRange) return null;\n    const shouldExecute = schedule.frequency === 'daily' || schedule.frequency === 'weekly' && day % 7 === 1 || schedule.frequency === 'continuous' || !schedule.frequency && day === 1;\n    if (!shouldExecute) return null;\n    return {\n      type: 'scheduled',\n      category: targetAction,\n      description: schedule.description,\n      action: `${targetAction} 실시`,\n      urgency: 'medium',\n      estimatedDuration: this.getTaskDuration(targetAction),\n      estimatedCost: this.getTaskCost(targetAction)\n    };\n  }\n\n  /**\n   * 작업별 소요 시간\n   */\n  getTaskDuration(task) {\n    const durations = {\n      '정식': '4-6시간',\n      '활착관리': '30분',\n      '관수관리': '20분',\n      '온도관리': '지속적',\n      '병해예방': '1시간',\n      '저온처리': '지속적',\n      '수분관리': '2시간',\n      '과실관리': '2-3시간',\n      '수확': '3-4시간'\n    };\n    return durations[task] || '1시간';\n  }\n\n  /**\n   * 작업별 비용\n   */\n  getTaskCost(task) {\n    const costs = {\n      '정식': 50000,\n      '활착관리': 5000,\n      '관수관리': 3000,\n      '온도관리': 15000,\n      '병해예방': 20000,\n      '저온처리': 10000,\n      '수분관리': 8000,\n      '과실관리': 12000,\n      '수확': 25000\n    };\n    return costs[task] || 10000;\n  }\n\n  /**\n   * 일일 총 비용 계산\n   */\n  calculateDayCost(actions) {\n    return actions.reduce((total, action) => total + (action.estimatedCost || 0), 0);\n  }\n\n  /**\n   * 일일 작업량 계산\n   */\n  calculateWorkload(actions) {\n    const workloadMap = {\n      '즉시': 0.1,\n      '15-30분': 0.5,\n      '30분': 0.5,\n      '1시간': 1,\n      '2시간': 2,\n      '3-4시간': 3.5,\n      '지속적': 0.2\n    };\n    return actions.reduce((total, action) => {\n      const duration = action.estimatedDuration;\n      return total + (workloadMap[duration] || 1);\n    }, 0);\n  }\n\n  /**\n   * 작물 달력 초기화\n   */\n  initializeCropCalendar() {\n    return {\n      strawberry: {\n        planting: {\n          month: 9,\n          description: '딸기 정식 시기'\n        },\n        flowering: {\n          month: [11, 12, 1, 2],\n          description: '개화 시기'\n        },\n        harvest: {\n          month: [12, 1, 2, 3, 4, 5],\n          description: '수확 시기'\n        },\n        maintenance: {\n          month: [6, 7, 8],\n          description: '휴작 및 시설 정비'\n        }\n      }\n    };\n  }\n}\n\n/**\n * 통합 예측 시스템\n */\nexport class IntegratedPredictionSystem {\n  constructor() {\n    this.environmentEngine = new EnvironmentPredictionEngine();\n    this.actionEngine = new ActionPredictionEngine();\n  }\n\n  /**\n   * 종합 예측 실행\n   */\n  runComprehensivePrediction(currentState, externalFactors = {}) {\n    const {\n      environment: currentEnvironment,\n      week: currentWeek,\n      growthStage: currentGrowthStage\n    } = currentState;\n\n    // 환경 예측\n    const environmentPredictions = this.environmentEngine.predict7DayEnvironment(currentEnvironment, externalFactors);\n\n    // 작업 예측\n    const actionSchedule = this.actionEngine.predictFutureActions(environmentPredictions, currentWeek, currentGrowthStage);\n\n    // 종합 분석\n    const analysis = this.generateComprehensiveAnalysis(environmentPredictions, actionSchedule);\n    return {\n      environmentPredictions,\n      actionSchedule,\n      analysis,\n      recommendations: this.generateRecommendations(analysis),\n      riskAssessment: this.assessRisks(environmentPredictions, actionSchedule)\n    };\n  }\n\n  /**\n   * 종합 분석 생성\n   */\n  generateComprehensiveAnalysis(environmentPredictions, actionSchedule) {\n    const totalActions = actionSchedule.reduce((sum, day) => sum + day.actions.length, 0);\n    const totalCost = actionSchedule.reduce((sum, day) => sum + day.totalCost, 0);\n    const avgConfidence = environmentPredictions.reduce((sum, pred) => sum + pred.confidence, 0) / environmentPredictions.length;\n    const criticalDays = actionSchedule.filter(day => day.actions.some(action => action.urgency === 'critical')).length;\n    return {\n      summary: {\n        totalActions,\n        totalCost,\n        avgConfidence: Math.round(avgConfidence * 100),\n        criticalDays,\n        workloadPeak: Math.max(...actionSchedule.map(day => day.workload))\n      },\n      trends: {\n        temperatureTrend: this.calculateTrend(environmentPredictions, 'temperature'),\n        humidityTrend: this.calculateTrend(environmentPredictions, 'humidity'),\n        riskTrend: this.calculateRiskTrend(actionSchedule)\n      }\n    };\n  }\n\n  /**\n   * 추천사항 생성\n   */\n  generateRecommendations(analysis) {\n    const recommendations = [];\n    if (analysis.summary.criticalDays > 2) {\n      recommendations.push({\n        type: 'urgent',\n        title: '긴급 대응 체계 구축 필요',\n        description: `향후 7일 중 ${analysis.summary.criticalDays}일에 긴급 조치가 필요합니다. 비상 대응 계획을 수립하고 필요 자재를 미리 준비하세요.`,\n        priority: 'high'\n      });\n    }\n    if (analysis.summary.totalCost > 100000) {\n      recommendations.push({\n        type: 'economic',\n        title: '비용 최적화 검토 필요',\n        description: `예상 관리 비용이 ${analysis.summary.totalCost.toLocaleString()}원으로 높습니다. 작업 우선순위를 재검토하여 비용 효율적인 방안을 모색하세요.`,\n        priority: 'medium'\n      });\n    }\n    if (analysis.summary.avgConfidence < 70) {\n      recommendations.push({\n        type: 'monitoring',\n        title: '모니터링 강화 필요',\n        description: `예측 신뢰도가 ${analysis.summary.avgConfidence}%로 낮습니다. 환경 센서 점검과 실시간 모니터링을 강화하여 예측 정확도를 높이세요.`,\n        priority: 'medium'\n      });\n    }\n    return recommendations;\n  }\n\n  /**\n   * 위험도 평가\n   */\n  assessRisks(environmentPredictions, actionSchedule) {\n    const risks = [];\n\n    // 환경 위험도\n    environmentPredictions.forEach((prediction, index) => {\n      const extremeConditions = this.identifyExtremeConditions(prediction);\n      if (extremeConditions.length > 0) {\n        risks.push({\n          day: index + 1,\n          date: prediction.date,\n          type: 'environment',\n          level: this.calculateRiskLevel(extremeConditions),\n          conditions: extremeConditions,\n          impact: '생육 저해 및 수확량 감소 위험'\n        });\n      }\n    });\n\n    // 작업 부하 위험도\n    const highWorkloadDays = actionSchedule.filter(day => day.workload > 6);\n    if (highWorkloadDays.length > 0) {\n      risks.push({\n        type: 'workload',\n        level: 'medium',\n        days: highWorkloadDays.map(day => day.day),\n        impact: '과도한 작업량으로 인한 관리 품질 저하 위험'\n      });\n    }\n    return risks;\n  }\n\n  /**\n   * 극한 조건 식별\n   */\n  identifyExtremeConditions(prediction) {\n    const extremes = [];\n    Object.keys(ENVIRONMENT_SENSORS).forEach(sensor => {\n      const sensorData = ENVIRONMENT_SENSORS[sensor];\n      const value = prediction[sensor];\n      if (!value) return;\n      if (value < sensorData.criticalLow) {\n        extremes.push({\n          sensor,\n          value,\n          condition: 'critically_low',\n          description: `${sensorData.description} 위험 수준 (${value}${sensorData.unit})`\n        });\n      } else if (value > sensorData.criticalHigh) {\n        extremes.push({\n          sensor,\n          value,\n          condition: 'critically_high',\n          description: `${sensorData.description} 위험 수준 (${value}${sensorData.unit})`\n        });\n      }\n    });\n    return extremes;\n  }\n\n  /**\n   * 위험 수준 계산\n   */\n  calculateRiskLevel(extremeConditions) {\n    if (extremeConditions.length >= 3) return 'critical';\n    if (extremeConditions.length >= 2) return 'high';\n    if (extremeConditions.length >= 1) return 'medium';\n    return 'low';\n  }\n\n  /**\n   * 트렌드 계산\n   */\n  calculateTrend(predictions, field) {\n    if (predictions.length < 2) return 'stable';\n    const firstValue = predictions[0][field];\n    const lastValue = predictions[predictions.length - 1][field];\n    const change = (lastValue - firstValue) / firstValue * 100;\n    if (change > 5) return 'increasing';\n    if (change < -5) return 'decreasing';\n    return 'stable';\n  }\n\n  /**\n   * 위험 트렌드 계산\n   */\n  calculateRiskTrend(actionSchedule) {\n    const riskScores = actionSchedule.map(day => {\n      const criticalCount = day.actions.filter(a => a.urgency === 'critical').length;\n      const highCount = day.actions.filter(a => a.urgency === 'high').length;\n      return criticalCount * 3 + highCount * 2;\n    });\n    if (riskScores.length < 2) return 'stable';\n    const trend = riskScores[riskScores.length - 1] - riskScores[0];\n    if (trend > 2) return 'increasing';\n    if (trend < -2) return 'decreasing';\n    return 'stable';\n  }\n}","map":{"version":3,"names":["ENVIRONMENT_SENSORS","GROWTH_STAGES","DETAILED_SIMULATION_SCENARIOS","EnvironmentPredictionEngine","constructor","historicalData","weatherPatterns","initializeWeatherPatterns","seasonalTrends","initializeSeasonalTrends","predict7DayEnvironment","currentEnvironment","externalFactors","predictions","baseDate","Date","day","futureDate","getTime","prediction","predictSingleDay","push","baseEnvironment","targetDate","daysAhead","seasonalEffect","calculateSeasonalEffect","weatherEffect","calculateWeatherEffect","trendEffect","calculateTrendEffect","randomVariation","calculateRandomVariation","date","toISOString","split","temperature","applyPredictionFactors","humidity","lightIntensity","soilMoisture","co2","confidence","Math","max","weatherCondition","condition","month","getMonth","dayOfYear","floor","getFullYear","tempCycle","sin","PI","humidityCycle","cos","lightCycle","weatherForecast","externalTemperature","precipitation","windSpeed","cloudCover","tempEffect","humidityEffect","lightEffect","soilMoistureEffect","co2Effect","uncertainty","min","random","baseValue","factors","result","forEach","factor","multiplier","round","spring","temp","summer","autumn","winter","temperatureAmplitude","humidityAmplitude","lightAmplitude","ActionPredictionEngine","actionHistory","cropCalendar","initializeCropCalendar","predictFutureActions","environmentPredictions","currentWeek","currentGrowthStage","actionSchedule","index","actions","environmentActions","analyzeEnvironmentActions","stageActions","analyzeStageActions","preventiveActions","analyzePreventiveActions","length","prioritizeActions","totalCost","calculateDayCost","workload","calculateWorkload","Object","keys","sensor","sensorData","value","optimal","type","issue","description","unit","action","getActionForLowValue","urgency","criticalLow","estimatedDuration","getActionDuration","estimatedCost","getActionCost","getActionForHighValue","criticalHigh","week","stage","getCurrentStageByWeek","category","targetActions","targetAction","scheduledAction","getScheduledAction","abs","urgencyOrder","critical","high","medium","low","sort","a","b","urgencyDiff","actionMap","soilPH","direction","_durationMap$sensor","durationMap","_costMap$sensor","costMap","strawberryStages","strawberry","find","weeks","frequency","schedule","isInWeekRange","shouldExecute","getTaskDuration","getTaskCost","task","durations","costs","reduce","total","workloadMap","duration","planting","flowering","harvest","maintenance","IntegratedPredictionSystem","environmentEngine","actionEngine","runComprehensivePrediction","currentState","environment","growthStage","analysis","generateComprehensiveAnalysis","recommendations","generateRecommendations","riskAssessment","assessRisks","totalActions","sum","avgConfidence","pred","criticalDays","filter","some","summary","workloadPeak","map","trends","temperatureTrend","calculateTrend","humidityTrend","riskTrend","calculateRiskTrend","title","priority","toLocaleString","risks","extremeConditions","identifyExtremeConditions","level","calculateRiskLevel","conditions","impact","highWorkloadDays","days","extremes","field","firstValue","lastValue","change","riskScores","criticalCount","highCount","trend"],"sources":["/DATA1/elcom/aisf2/aisf/frontend/src/utils/predictionEngine.js"],"sourcesContent":["/**\n * 생육 환경 예측 및 의사결정 엔진\n * 미래 환경 변화 예측과 선제적 조치사항 추천\n */\n\nimport { ENVIRONMENT_SENSORS, GROWTH_STAGES } from './greenhouseSimulator';\nimport { DETAILED_SIMULATION_SCENARIOS } from './detailedScenarios';\n\n/**\n * 미래 환경 예측 엔진\n */\nexport class EnvironmentPredictionEngine {\n  constructor() {\n    this.historicalData = [];\n    this.weatherPatterns = this.initializeWeatherPatterns();\n    this.seasonalTrends = this.initializeSeasonalTrends();\n  }\n\n  /**\n   * 7일간 환경 예측\n   */\n  predict7DayEnvironment(currentEnvironment, externalFactors = {}) {\n    const predictions = [];\n    const baseDate = new Date();\n\n    for (let day = 1; day <= 7; day++) {\n      const futureDate = new Date(baseDate.getTime() + day * 24 * 60 * 60 * 1000);\n      const prediction = this.predictSingleDay(currentEnvironment, futureDate, day, externalFactors);\n      predictions.push(prediction);\n    }\n\n    return predictions;\n  }\n\n  /**\n   * 단일 날짜 환경 예측\n   */\n  predictSingleDay(baseEnvironment, targetDate, daysAhead, externalFactors) {\n    const seasonalEffect = this.calculateSeasonalEffect(targetDate);\n    const weatherEffect = this.calculateWeatherEffect(daysAhead, externalFactors);\n    const trendEffect = this.calculateTrendEffect(daysAhead);\n    const randomVariation = this.calculateRandomVariation(daysAhead);\n\n    return {\n      date: targetDate.toISOString().split('T')[0],\n      daysAhead,\n      temperature: this.applyPredictionFactors(\n        baseEnvironment.temperature,\n        [seasonalEffect.temperature, weatherEffect.temperature, trendEffect.temperature, randomVariation.temperature]\n      ),\n      humidity: this.applyPredictionFactors(\n        baseEnvironment.humidity,\n        [seasonalEffect.humidity, weatherEffect.humidity, trendEffect.humidity, randomVariation.humidity]\n      ),\n      lightIntensity: this.applyPredictionFactors(\n        baseEnvironment.lightIntensity,\n        [seasonalEffect.lightIntensity, weatherEffect.lightIntensity, trendEffect.lightIntensity, randomVariation.lightIntensity]\n      ),\n      soilMoisture: this.applyPredictionFactors(\n        baseEnvironment.soilMoisture,\n        [seasonalEffect.soilMoisture, weatherEffect.soilMoisture, trendEffect.soilMoisture, randomVariation.soilMoisture]\n      ),\n      co2: this.applyPredictionFactors(\n        baseEnvironment.co2,\n        [seasonalEffect.co2, weatherEffect.co2, trendEffect.co2, randomVariation.co2]\n      ),\n      confidence: Math.max(0.3, 0.95 - (daysAhead * 0.1)), // 예측 신뢰도\n      weatherCondition: weatherEffect.condition\n    };\n  }\n\n  /**\n   * 계절적 영향 계산\n   */\n  calculateSeasonalEffect(date) {\n    const month = date.getMonth() + 1;\n    const dayOfYear = Math.floor((date - new Date(date.getFullYear(), 0, 0)) / 86400000);\n    \n    // 계절별 기본 패턴\n    const tempCycle = Math.sin((dayOfYear / 365) * 2 * Math.PI) * 8;\n    const humidityCycle = Math.cos((dayOfYear / 365) * 2 * Math.PI) * 10;\n    const lightCycle = Math.sin((dayOfYear / 365) * 2 * Math.PI + Math.PI/2) * 0.3;\n\n    return {\n      temperature: tempCycle,\n      humidity: humidityCycle,\n      lightIntensity: 1 + lightCycle,\n      soilMoisture: month >= 6 && month <= 8 ? -5 : 3, // 여름철 증발량 증가\n      co2: month >= 11 || month <= 2 ? 50 : -30 // 겨울철 환기 감소로 CO2 증가\n    };\n  }\n\n  /**\n   * 기상 영향 계산\n   */\n  calculateWeatherEffect(daysAhead, externalFactors) {\n    const { \n      weatherForecast = 'normal',\n      externalTemperature = 20,\n      precipitation = 0,\n      windSpeed = 2,\n      cloudCover = 0.3\n    } = externalFactors;\n\n    let tempEffect = 0;\n    let humidityEffect = 0;\n    let lightEffect = 1;\n    let soilMoistureEffect = 0;\n    let co2Effect = 0;\n    let condition = '맑음';\n\n    switch (weatherForecast) {\n      case 'sunny':\n        tempEffect = 2;\n        humidityEffect = -5;\n        lightEffect = 1.2;\n        condition = '맑음';\n        break;\n      case 'cloudy':\n        tempEffect = -1;\n        humidityEffect = 5;\n        lightEffect = 0.6;\n        condition = '흐림';\n        break;\n      case 'rainy':\n        tempEffect = -3;\n        humidityEffect = 15;\n        lightEffect = 0.4;\n        soilMoistureEffect = 10;\n        condition = '비';\n        break;\n      case 'storm':\n        tempEffect = -5;\n        humidityEffect = 25;\n        lightEffect = 0.3;\n        soilMoistureEffect = 20;\n        co2Effect = -100;\n        condition = '폭풍';\n        break;\n      default:\n        condition = '보통';\n    }\n\n    // 외부 온도 영향 (온실은 외부 온도의 30% 영향)\n    tempEffect += (externalTemperature - 20) * 0.3;\n\n    return {\n      temperature: tempEffect,\n      humidity: humidityEffect,\n      lightIntensity: lightEffect,\n      soilMoisture: soilMoistureEffect,\n      co2: co2Effect,\n      condition\n    };\n  }\n\n  /**\n   * 트렌드 영향 계산 (연속적 변화)\n   */\n  calculateTrendEffect(daysAhead) {\n    // 시간이 지날수록 누적되는 변화\n    return {\n      temperature: 0.1 * daysAhead,\n      humidity: -0.2 * daysAhead,\n      lightIntensity: 1 + (0.01 * daysAhead),\n      soilMoisture: -0.5 * daysAhead,\n      co2: 5 * daysAhead\n    };\n  }\n\n  /**\n   * 랜덤 변동 계산\n   */\n  calculateRandomVariation(daysAhead) {\n    const uncertainty = Math.min(0.3, 0.05 * daysAhead); // 예측 불확실성\n    \n    return {\n      temperature: (Math.random() - 0.5) * 4 * uncertainty,\n      humidity: (Math.random() - 0.5) * 10 * uncertainty,\n      lightIntensity: 1 + (Math.random() - 0.5) * 0.2 * uncertainty,\n      soilMoisture: (Math.random() - 0.5) * 8 * uncertainty,\n      co2: (Math.random() - 0.5) * 100 * uncertainty\n    };\n  }\n\n  /**\n   * 예측 인자들을 종합하여 최종 값 계산\n   */\n  applyPredictionFactors(baseValue, factors) {\n    let result = baseValue;\n    \n    factors.forEach(factor => {\n      if (typeof factor === 'number') {\n        result += factor;\n      } else if (typeof factor === 'object' && factor.multiplier) {\n        result *= factor.multiplier;\n      }\n    });\n\n    return Math.round(result * 10) / 10;\n  }\n\n  /**\n   * 기상 패턴 초기화\n   */\n  initializeWeatherPatterns() {\n    return {\n      spring: { temp: [15, 25], humidity: [50, 70], precipitation: 0.3 },\n      summer: { temp: [25, 35], humidity: [60, 80], precipitation: 0.4 },\n      autumn: { temp: [10, 20], humidity: [55, 75], precipitation: 0.2 },\n      winter: { temp: [0, 10], humidity: [45, 65], precipitation: 0.1 }\n    };\n  }\n\n  /**\n   * 계절 트렌드 초기화\n   */\n  initializeSeasonalTrends() {\n    return {\n      temperatureAmplitude: 15, // 연간 온도 변화폭\n      humidityAmplitude: 20,    // 연간 습도 변화폭\n      lightAmplitude: 0.4       // 연간 광량 변화폭\n    };\n  }\n}\n\n/**\n * 작업 예측 및 스케줄링 엔진\n */\nexport class ActionPredictionEngine {\n  constructor() {\n    this.actionHistory = [];\n    this.cropCalendar = this.initializeCropCalendar();\n  }\n\n  /**\n   * 미래 필요 작업 예측\n   */\n  predictFutureActions(environmentPredictions, currentWeek, currentGrowthStage) {\n    const actionSchedule = [];\n\n    environmentPredictions.forEach((prediction, index) => {\n      const day = index + 1;\n      const actions = [];\n\n      // 환경 기반 즉시 조치사항\n      const environmentActions = this.analyzeEnvironmentActions(prediction);\n      \n      // 생육 단계 기반 정기 작업\n      const stageActions = this.analyzeStageActions(currentWeek + Math.floor(day / 7), day);\n      \n      // 예방적 조치사항\n      const preventiveActions = this.analyzePreventiveActions(prediction, day);\n\n      actions.push(...environmentActions, ...stageActions, ...preventiveActions);\n\n      if (actions.length > 0) {\n        actionSchedule.push({\n          date: prediction.date,\n          day: day,\n          confidence: prediction.confidence,\n          actions: this.prioritizeActions(actions),\n          totalCost: this.calculateDayCost(actions),\n          workload: this.calculateWorkload(actions)\n        });\n      }\n    });\n\n    return actionSchedule;\n  }\n\n  /**\n   * 환경 조건 기반 조치사항 분석\n   */\n  analyzeEnvironmentActions(prediction) {\n    const actions = [];\n\n    Object.keys(ENVIRONMENT_SENSORS).forEach(sensor => {\n      const sensorData = ENVIRONMENT_SENSORS[sensor];\n      const value = prediction[sensor];\n      \n      if (!value) return;\n\n      if (value < sensorData.optimal[0]) {\n        actions.push({\n          type: 'environment',\n          sensor: sensor,\n          issue: 'below_optimal',\n          description: `${sensorData.description}이 최적 범위보다 낮습니다 (${value}${sensorData.unit})`,\n          action: this.getActionForLowValue(sensor),\n          urgency: value < sensorData.criticalLow ? 'critical' : 'high',\n          estimatedDuration: this.getActionDuration(sensor, 'low'),\n          estimatedCost: this.getActionCost(sensor, 'low')\n        });\n      } else if (value > sensorData.optimal[1]) {\n        actions.push({\n          type: 'environment',\n          sensor: sensor,\n          issue: 'above_optimal',\n          description: `${sensorData.description}이 최적 범위보다 높습니다 (${value}${sensorData.unit})`,\n          action: this.getActionForHighValue(sensor),\n          urgency: value > sensorData.criticalHigh ? 'critical' : 'high',\n          estimatedDuration: this.getActionDuration(sensor, 'high'),\n          estimatedCost: this.getActionCost(sensor, 'high')\n        });\n      }\n    });\n\n    return actions;\n  }\n\n  /**\n   * 생육 단계 기반 정기 작업 분석\n   */\n  analyzeStageActions(week, day) {\n    const actions = [];\n    const stage = this.getCurrentStageByWeek(week);\n    \n    if (!stage) return actions;\n\n    // 주간 정기 작업\n    if (day % 7 === 1) { // 매주 월요일\n      actions.push({\n        type: 'routine',\n        category: 'weekly_inspection',\n        description: `${stage.stage} 단계 주간 점검`,\n        action: '생육 상태 관찰 및 기록',\n        urgency: 'low',\n        estimatedDuration: '30분',\n        estimatedCost: 0\n      });\n    }\n\n    // 생육 단계별 특수 작업\n    stage.targetActions.forEach(targetAction => {\n      const scheduledAction = this.getScheduledAction(targetAction, week, day);\n      if (scheduledAction) {\n        actions.push(scheduledAction);\n      }\n    });\n\n    return actions;\n  }\n\n  /**\n   * 예방적 조치사항 분석\n   */\n  analyzePreventiveActions(prediction, day) {\n    const actions = [];\n\n    // 병해충 예방\n    if (prediction.humidity > 80 && prediction.temperature > 20) {\n      actions.push({\n        type: 'preventive',\n        category: 'disease_prevention',\n        description: '고온다습 조건으로 곰팡이병 발생 위험 증가',\n        action: '예방적 환기 강화 및 방제제 살포 준비',\n        urgency: 'medium',\n        estimatedDuration: '1시간',\n        estimatedCost: 15000\n      });\n    }\n\n    // 스트레스 예방\n    if (Math.abs(prediction.temperature - 22) > 5) {\n      actions.push({\n        type: 'preventive',\n        category: 'stress_prevention',\n        description: '온도 스트레스 예방 필요',\n        action: '온도 제어 시스템 점검 및 대비',\n        urgency: 'medium',\n        estimatedDuration: '45분',\n        estimatedCost: 5000\n      });\n    }\n\n    return actions;\n  }\n\n  /**\n   * 작업 우선순위 결정\n   */\n  prioritizeActions(actions) {\n    const urgencyOrder = { critical: 4, high: 3, medium: 2, low: 1 };\n    \n    return actions.sort((a, b) => {\n      // 1차: 긴급도\n      const urgencyDiff = urgencyOrder[b.urgency] - urgencyOrder[a.urgency];\n      if (urgencyDiff !== 0) return urgencyDiff;\n      \n      // 2차: 비용 효율성 (낮은 비용 우선)\n      return a.estimatedCost - b.estimatedCost;\n    });\n  }\n\n  /**\n   * 낮은 값에 대한 조치사항\n   */\n  getActionForLowValue(sensor) {\n    const actionMap = {\n      temperature: '난방 시스템 가동',\n      humidity: '가습기 운전 또는 미스트 분무',\n      soilMoisture: '관수 실시',\n      lightIntensity: 'LED 보광등 가동',\n      co2: 'CO2 발생기 가동',\n      soilPH: '석회 시용으로 pH 상승',\n      windSpeed: '환기팬 가동'\n    };\n    return actionMap[sensor] || '전문가 상담';\n  }\n\n  /**\n   * 높은 값에 대한 조치사항\n   */\n  getActionForHighValue(sensor) {\n    const actionMap = {\n      temperature: '환기 강화 또는 차광막 설치',\n      humidity: '제습기 가동 또는 환기 강화',\n      soilMoisture: '배수 개선 및 관수 중단',\n      lightIntensity: '차광막 설치',\n      co2: '환기 강화로 CO2 배출',\n      soilPH: '황산 처리로 pH 하강',\n      windSpeed: '환기 조절'\n    };\n    return actionMap[sensor] || '전문가 상담';\n  }\n\n  /**\n   * 작업 소요 시간 추정\n   */\n  getActionDuration(sensor, direction) {\n    const durationMap = {\n      temperature: { low: '2-4시간', high: '1-3시간' },\n      humidity: { low: '30분-1시간', high: '1-2시간' },\n      soilMoisture: { low: '15-30분', high: '4-8시간' },\n      lightIntensity: { low: '즉시', high: '30분' },\n      co2: { low: '즉시', high: '30분' }\n    };\n    return durationMap[sensor]?.[direction] || '1시간';\n  }\n\n  /**\n   * 작업 비용 추정\n   */\n  getActionCost(sensor, direction) {\n    const costMap = {\n      temperature: { low: 25000, high: 8000 },\n      humidity: { low: 5000, high: 12000 },\n      soilMoisture: { low: 3000, high: 2000 },\n      lightIntensity: { low: 20000, high: 5000 },\n      co2: { low: 15000, high: 3000 }\n    };\n    return costMap[sensor]?.[direction] || 10000;\n  }\n\n  /**\n   * 현재 주차의 생육 단계 조회\n   */\n  getCurrentStageByWeek(week) {\n    const strawberryStages = GROWTH_STAGES.strawberry;\n    return strawberryStages.find(stage => \n      week >= stage.weeks[0] && week <= stage.weeks[1]\n    );\n  }\n\n  /**\n   * 예정된 작업 조회\n   */\n  getScheduledAction(targetAction, week, day) {\n    const actionSchedule = {\n      '정식': { weeks: [1], description: '딸기 묘 정식 작업' },\n      '활착관리': { weeks: [1, 2], description: '정식 후 활착 관리' },\n      '관수관리': { weeks: [5, 12], frequency: 'daily', description: '영양생장기 관수 관리' },\n      '온도관리': { weeks: [5, 28], frequency: 'continuous', description: '최적 온도 유지' },\n      '병해예방': { weeks: [8, 40], frequency: 'weekly', description: '병해충 예방 점검' },\n      '저온처리': { weeks: [13, 16], description: '화아분화 촉진을 위한 저온 처리' },\n      '수분관리': { weeks: [21, 28], description: '개화기 수분 관리' },\n      '과실관리': { weeks: [29, 40], frequency: 'daily', description: '과실 솎기 및 관리' },\n      '수확': { weeks: [35, 52], frequency: 'daily', description: '성숙 과실 수확' }\n    };\n\n    const schedule = actionSchedule[targetAction];\n    if (!schedule) return null;\n\n    const isInWeekRange = schedule.weeks.length === 1 ? \n      week === schedule.weeks[0] : \n      week >= schedule.weeks[0] && week <= schedule.weeks[1];\n\n    if (!isInWeekRange) return null;\n\n    const shouldExecute = schedule.frequency === 'daily' || \n                         (schedule.frequency === 'weekly' && day % 7 === 1) ||\n                         (schedule.frequency === 'continuous') ||\n                         (!schedule.frequency && day === 1);\n\n    if (!shouldExecute) return null;\n\n    return {\n      type: 'scheduled',\n      category: targetAction,\n      description: schedule.description,\n      action: `${targetAction} 실시`,\n      urgency: 'medium',\n      estimatedDuration: this.getTaskDuration(targetAction),\n      estimatedCost: this.getTaskCost(targetAction)\n    };\n  }\n\n  /**\n   * 작업별 소요 시간\n   */\n  getTaskDuration(task) {\n    const durations = {\n      '정식': '4-6시간',\n      '활착관리': '30분',\n      '관수관리': '20분',\n      '온도관리': '지속적',\n      '병해예방': '1시간',\n      '저온처리': '지속적',\n      '수분관리': '2시간',\n      '과실관리': '2-3시간',\n      '수확': '3-4시간'\n    };\n    return durations[task] || '1시간';\n  }\n\n  /**\n   * 작업별 비용\n   */\n  getTaskCost(task) {\n    const costs = {\n      '정식': 50000,\n      '활착관리': 5000,\n      '관수관리': 3000,\n      '온도관리': 15000,\n      '병해예방': 20000,\n      '저온처리': 10000,\n      '수분관리': 8000,\n      '과실관리': 12000,\n      '수확': 25000\n    };\n    return costs[task] || 10000;\n  }\n\n  /**\n   * 일일 총 비용 계산\n   */\n  calculateDayCost(actions) {\n    return actions.reduce((total, action) => total + (action.estimatedCost || 0), 0);\n  }\n\n  /**\n   * 일일 작업량 계산\n   */\n  calculateWorkload(actions) {\n    const workloadMap = { \n      '즉시': 0.1, \n      '15-30분': 0.5, \n      '30분': 0.5, \n      '1시간': 1, \n      '2시간': 2, \n      '3-4시간': 3.5,\n      '지속적': 0.2 \n    };\n    \n    return actions.reduce((total, action) => {\n      const duration = action.estimatedDuration;\n      return total + (workloadMap[duration] || 1);\n    }, 0);\n  }\n\n  /**\n   * 작물 달력 초기화\n   */\n  initializeCropCalendar() {\n    return {\n      strawberry: {\n        planting: { month: 9, description: '딸기 정식 시기' },\n        flowering: { month: [11, 12, 1, 2], description: '개화 시기' },\n        harvest: { month: [12, 1, 2, 3, 4, 5], description: '수확 시기' },\n        maintenance: { month: [6, 7, 8], description: '휴작 및 시설 정비' }\n      }\n    };\n  }\n}\n\n/**\n * 통합 예측 시스템\n */\nexport class IntegratedPredictionSystem {\n  constructor() {\n    this.environmentEngine = new EnvironmentPredictionEngine();\n    this.actionEngine = new ActionPredictionEngine();\n  }\n\n  /**\n   * 종합 예측 실행\n   */\n  runComprehensivePrediction(currentState, externalFactors = {}) {\n    const {\n      environment: currentEnvironment,\n      week: currentWeek,\n      growthStage: currentGrowthStage\n    } = currentState;\n\n    // 환경 예측\n    const environmentPredictions = this.environmentEngine.predict7DayEnvironment(\n      currentEnvironment, \n      externalFactors\n    );\n\n    // 작업 예측\n    const actionSchedule = this.actionEngine.predictFutureActions(\n      environmentPredictions,\n      currentWeek,\n      currentGrowthStage\n    );\n\n    // 종합 분석\n    const analysis = this.generateComprehensiveAnalysis(\n      environmentPredictions,\n      actionSchedule\n    );\n\n    return {\n      environmentPredictions,\n      actionSchedule,\n      analysis,\n      recommendations: this.generateRecommendations(analysis),\n      riskAssessment: this.assessRisks(environmentPredictions, actionSchedule)\n    };\n  }\n\n  /**\n   * 종합 분석 생성\n   */\n  generateComprehensiveAnalysis(environmentPredictions, actionSchedule) {\n    const totalActions = actionSchedule.reduce((sum, day) => sum + day.actions.length, 0);\n    const totalCost = actionSchedule.reduce((sum, day) => sum + day.totalCost, 0);\n    const avgConfidence = environmentPredictions.reduce((sum, pred) => sum + pred.confidence, 0) / environmentPredictions.length;\n    \n    const criticalDays = actionSchedule.filter(day => \n      day.actions.some(action => action.urgency === 'critical')\n    ).length;\n\n    return {\n      summary: {\n        totalActions,\n        totalCost,\n        avgConfidence: Math.round(avgConfidence * 100),\n        criticalDays,\n        workloadPeak: Math.max(...actionSchedule.map(day => day.workload))\n      },\n      trends: {\n        temperatureTrend: this.calculateTrend(environmentPredictions, 'temperature'),\n        humidityTrend: this.calculateTrend(environmentPredictions, 'humidity'),\n        riskTrend: this.calculateRiskTrend(actionSchedule)\n      }\n    };\n  }\n\n  /**\n   * 추천사항 생성\n   */\n  generateRecommendations(analysis) {\n    const recommendations = [];\n\n    if (analysis.summary.criticalDays > 2) {\n      recommendations.push({\n        type: 'urgent',\n        title: '긴급 대응 체계 구축 필요',\n        description: `향후 7일 중 ${analysis.summary.criticalDays}일에 긴급 조치가 필요합니다. 비상 대응 계획을 수립하고 필요 자재를 미리 준비하세요.`,\n        priority: 'high'\n      });\n    }\n\n    if (analysis.summary.totalCost > 100000) {\n      recommendations.push({\n        type: 'economic',\n        title: '비용 최적화 검토 필요',\n        description: `예상 관리 비용이 ${analysis.summary.totalCost.toLocaleString()}원으로 높습니다. 작업 우선순위를 재검토하여 비용 효율적인 방안을 모색하세요.`,\n        priority: 'medium'\n      });\n    }\n\n    if (analysis.summary.avgConfidence < 70) {\n      recommendations.push({\n        type: 'monitoring',\n        title: '모니터링 강화 필요',\n        description: `예측 신뢰도가 ${analysis.summary.avgConfidence}%로 낮습니다. 환경 센서 점검과 실시간 모니터링을 강화하여 예측 정확도를 높이세요.`,\n        priority: 'medium'\n      });\n    }\n\n    return recommendations;\n  }\n\n  /**\n   * 위험도 평가\n   */\n  assessRisks(environmentPredictions, actionSchedule) {\n    const risks = [];\n\n    // 환경 위험도\n    environmentPredictions.forEach((prediction, index) => {\n      const extremeConditions = this.identifyExtremeConditions(prediction);\n      if (extremeConditions.length > 0) {\n        risks.push({\n          day: index + 1,\n          date: prediction.date,\n          type: 'environment',\n          level: this.calculateRiskLevel(extremeConditions),\n          conditions: extremeConditions,\n          impact: '생육 저해 및 수확량 감소 위험'\n        });\n      }\n    });\n\n    // 작업 부하 위험도\n    const highWorkloadDays = actionSchedule.filter(day => day.workload > 6);\n    if (highWorkloadDays.length > 0) {\n      risks.push({\n        type: 'workload',\n        level: 'medium',\n        days: highWorkloadDays.map(day => day.day),\n        impact: '과도한 작업량으로 인한 관리 품질 저하 위험'\n      });\n    }\n\n    return risks;\n  }\n\n  /**\n   * 극한 조건 식별\n   */\n  identifyExtremeConditions(prediction) {\n    const extremes = [];\n\n    Object.keys(ENVIRONMENT_SENSORS).forEach(sensor => {\n      const sensorData = ENVIRONMENT_SENSORS[sensor];\n      const value = prediction[sensor];\n      \n      if (!value) return;\n\n      if (value < sensorData.criticalLow) {\n        extremes.push({\n          sensor,\n          value,\n          condition: 'critically_low',\n          description: `${sensorData.description} 위험 수준 (${value}${sensorData.unit})`\n        });\n      } else if (value > sensorData.criticalHigh) {\n        extremes.push({\n          sensor,\n          value,\n          condition: 'critically_high',\n          description: `${sensorData.description} 위험 수준 (${value}${sensorData.unit})`\n        });\n      }\n    });\n\n    return extremes;\n  }\n\n  /**\n   * 위험 수준 계산\n   */\n  calculateRiskLevel(extremeConditions) {\n    if (extremeConditions.length >= 3) return 'critical';\n    if (extremeConditions.length >= 2) return 'high';\n    if (extremeConditions.length >= 1) return 'medium';\n    return 'low';\n  }\n\n  /**\n   * 트렌드 계산\n   */\n  calculateTrend(predictions, field) {\n    if (predictions.length < 2) return 'stable';\n    \n    const firstValue = predictions[0][field];\n    const lastValue = predictions[predictions.length - 1][field];\n    const change = ((lastValue - firstValue) / firstValue) * 100;\n    \n    if (change > 5) return 'increasing';\n    if (change < -5) return 'decreasing';\n    return 'stable';\n  }\n\n  /**\n   * 위험 트렌드 계산\n   */\n  calculateRiskTrend(actionSchedule) {\n    const riskScores = actionSchedule.map(day => {\n      const criticalCount = day.actions.filter(a => a.urgency === 'critical').length;\n      const highCount = day.actions.filter(a => a.urgency === 'high').length;\n      return criticalCount * 3 + highCount * 2;\n    });\n\n    if (riskScores.length < 2) return 'stable';\n    \n    const trend = riskScores[riskScores.length - 1] - riskScores[0];\n    if (trend > 2) return 'increasing';\n    if (trend < -2) return 'decreasing';\n    return 'stable';\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,SAASA,mBAAmB,EAAEC,aAAa,QAAQ,uBAAuB;AAC1E,SAASC,6BAA6B,QAAQ,qBAAqB;;AAEnE;AACA;AACA;AACA,OAAO,MAAMC,2BAA2B,CAAC;EACvCC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,cAAc,GAAG,EAAE;IACxB,IAAI,CAACC,eAAe,GAAG,IAAI,CAACC,yBAAyB,CAAC,CAAC;IACvD,IAAI,CAACC,cAAc,GAAG,IAAI,CAACC,wBAAwB,CAAC,CAAC;EACvD;;EAEA;AACF;AACA;EACEC,sBAAsBA,CAACC,kBAAkB,EAAEC,eAAe,GAAG,CAAC,CAAC,EAAE;IAC/D,MAAMC,WAAW,GAAG,EAAE;IACtB,MAAMC,QAAQ,GAAG,IAAIC,IAAI,CAAC,CAAC;IAE3B,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,IAAI,CAAC,EAAEA,GAAG,EAAE,EAAE;MACjC,MAAMC,UAAU,GAAG,IAAIF,IAAI,CAACD,QAAQ,CAACI,OAAO,CAAC,CAAC,GAAGF,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC;MAC3E,MAAMG,UAAU,GAAG,IAAI,CAACC,gBAAgB,CAACT,kBAAkB,EAAEM,UAAU,EAAED,GAAG,EAAEJ,eAAe,CAAC;MAC9FC,WAAW,CAACQ,IAAI,CAACF,UAAU,CAAC;IAC9B;IAEA,OAAON,WAAW;EACpB;;EAEA;AACF;AACA;EACEO,gBAAgBA,CAACE,eAAe,EAAEC,UAAU,EAAEC,SAAS,EAAEZ,eAAe,EAAE;IACxE,MAAMa,cAAc,GAAG,IAAI,CAACC,uBAAuB,CAACH,UAAU,CAAC;IAC/D,MAAMI,aAAa,GAAG,IAAI,CAACC,sBAAsB,CAACJ,SAAS,EAAEZ,eAAe,CAAC;IAC7E,MAAMiB,WAAW,GAAG,IAAI,CAACC,oBAAoB,CAACN,SAAS,CAAC;IACxD,MAAMO,eAAe,GAAG,IAAI,CAACC,wBAAwB,CAACR,SAAS,CAAC;IAEhE,OAAO;MACLS,IAAI,EAAEV,UAAU,CAACW,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MAC5CX,SAAS;MACTY,WAAW,EAAE,IAAI,CAACC,sBAAsB,CACtCf,eAAe,CAACc,WAAW,EAC3B,CAACX,cAAc,CAACW,WAAW,EAAET,aAAa,CAACS,WAAW,EAAEP,WAAW,CAACO,WAAW,EAAEL,eAAe,CAACK,WAAW,CAC9G,CAAC;MACDE,QAAQ,EAAE,IAAI,CAACD,sBAAsB,CACnCf,eAAe,CAACgB,QAAQ,EACxB,CAACb,cAAc,CAACa,QAAQ,EAAEX,aAAa,CAACW,QAAQ,EAAET,WAAW,CAACS,QAAQ,EAAEP,eAAe,CAACO,QAAQ,CAClG,CAAC;MACDC,cAAc,EAAE,IAAI,CAACF,sBAAsB,CACzCf,eAAe,CAACiB,cAAc,EAC9B,CAACd,cAAc,CAACc,cAAc,EAAEZ,aAAa,CAACY,cAAc,EAAEV,WAAW,CAACU,cAAc,EAAER,eAAe,CAACQ,cAAc,CAC1H,CAAC;MACDC,YAAY,EAAE,IAAI,CAACH,sBAAsB,CACvCf,eAAe,CAACkB,YAAY,EAC5B,CAACf,cAAc,CAACe,YAAY,EAAEb,aAAa,CAACa,YAAY,EAAEX,WAAW,CAACW,YAAY,EAAET,eAAe,CAACS,YAAY,CAClH,CAAC;MACDC,GAAG,EAAE,IAAI,CAACJ,sBAAsB,CAC9Bf,eAAe,CAACmB,GAAG,EACnB,CAAChB,cAAc,CAACgB,GAAG,EAAEd,aAAa,CAACc,GAAG,EAAEZ,WAAW,CAACY,GAAG,EAAEV,eAAe,CAACU,GAAG,CAC9E,CAAC;MACDC,UAAU,EAAEC,IAAI,CAACC,GAAG,CAAC,GAAG,EAAE,IAAI,GAAIpB,SAAS,GAAG,GAAI,CAAC;MAAE;MACrDqB,gBAAgB,EAAElB,aAAa,CAACmB;IAClC,CAAC;EACH;;EAEA;AACF;AACA;EACEpB,uBAAuBA,CAACO,IAAI,EAAE;IAC5B,MAAMc,KAAK,GAAGd,IAAI,CAACe,QAAQ,CAAC,CAAC,GAAG,CAAC;IACjC,MAAMC,SAAS,GAAGN,IAAI,CAACO,KAAK,CAAC,CAACjB,IAAI,GAAG,IAAIlB,IAAI,CAACkB,IAAI,CAACkB,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,IAAI,QAAQ,CAAC;;IAEpF;IACA,MAAMC,SAAS,GAAGT,IAAI,CAACU,GAAG,CAAEJ,SAAS,GAAG,GAAG,GAAI,CAAC,GAAGN,IAAI,CAACW,EAAE,CAAC,GAAG,CAAC;IAC/D,MAAMC,aAAa,GAAGZ,IAAI,CAACa,GAAG,CAAEP,SAAS,GAAG,GAAG,GAAI,CAAC,GAAGN,IAAI,CAACW,EAAE,CAAC,GAAG,EAAE;IACpE,MAAMG,UAAU,GAAGd,IAAI,CAACU,GAAG,CAAEJ,SAAS,GAAG,GAAG,GAAI,CAAC,GAAGN,IAAI,CAACW,EAAE,GAAGX,IAAI,CAACW,EAAE,GAAC,CAAC,CAAC,GAAG,GAAG;IAE9E,OAAO;MACLlB,WAAW,EAAEgB,SAAS;MACtBd,QAAQ,EAAEiB,aAAa;MACvBhB,cAAc,EAAE,CAAC,GAAGkB,UAAU;MAC9BjB,YAAY,EAAEO,KAAK,IAAI,CAAC,IAAIA,KAAK,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;MAAE;MACjDN,GAAG,EAAEM,KAAK,IAAI,EAAE,IAAIA,KAAK,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC;IAC5C,CAAC;EACH;;EAEA;AACF;AACA;EACEnB,sBAAsBA,CAACJ,SAAS,EAAEZ,eAAe,EAAE;IACjD,MAAM;MACJ8C,eAAe,GAAG,QAAQ;MAC1BC,mBAAmB,GAAG,EAAE;MACxBC,aAAa,GAAG,CAAC;MACjBC,SAAS,GAAG,CAAC;MACbC,UAAU,GAAG;IACf,CAAC,GAAGlD,eAAe;IAEnB,IAAImD,UAAU,GAAG,CAAC;IAClB,IAAIC,cAAc,GAAG,CAAC;IACtB,IAAIC,WAAW,GAAG,CAAC;IACnB,IAAIC,kBAAkB,GAAG,CAAC;IAC1B,IAAIC,SAAS,GAAG,CAAC;IACjB,IAAIrB,SAAS,GAAG,IAAI;IAEpB,QAAQY,eAAe;MACrB,KAAK,OAAO;QACVK,UAAU,GAAG,CAAC;QACdC,cAAc,GAAG,CAAC,CAAC;QACnBC,WAAW,GAAG,GAAG;QACjBnB,SAAS,GAAG,IAAI;QAChB;MACF,KAAK,QAAQ;QACXiB,UAAU,GAAG,CAAC,CAAC;QACfC,cAAc,GAAG,CAAC;QAClBC,WAAW,GAAG,GAAG;QACjBnB,SAAS,GAAG,IAAI;QAChB;MACF,KAAK,OAAO;QACViB,UAAU,GAAG,CAAC,CAAC;QACfC,cAAc,GAAG,EAAE;QACnBC,WAAW,GAAG,GAAG;QACjBC,kBAAkB,GAAG,EAAE;QACvBpB,SAAS,GAAG,GAAG;QACf;MACF,KAAK,OAAO;QACViB,UAAU,GAAG,CAAC,CAAC;QACfC,cAAc,GAAG,EAAE;QACnBC,WAAW,GAAG,GAAG;QACjBC,kBAAkB,GAAG,EAAE;QACvBC,SAAS,GAAG,CAAC,GAAG;QAChBrB,SAAS,GAAG,IAAI;QAChB;MACF;QACEA,SAAS,GAAG,IAAI;IACpB;;IAEA;IACAiB,UAAU,IAAI,CAACJ,mBAAmB,GAAG,EAAE,IAAI,GAAG;IAE9C,OAAO;MACLvB,WAAW,EAAE2B,UAAU;MACvBzB,QAAQ,EAAE0B,cAAc;MACxBzB,cAAc,EAAE0B,WAAW;MAC3BzB,YAAY,EAAE0B,kBAAkB;MAChCzB,GAAG,EAAE0B,SAAS;MACdrB;IACF,CAAC;EACH;;EAEA;AACF;AACA;EACEhB,oBAAoBA,CAACN,SAAS,EAAE;IAC9B;IACA,OAAO;MACLY,WAAW,EAAE,GAAG,GAAGZ,SAAS;MAC5Bc,QAAQ,EAAE,CAAC,GAAG,GAAGd,SAAS;MAC1Be,cAAc,EAAE,CAAC,GAAI,IAAI,GAAGf,SAAU;MACtCgB,YAAY,EAAE,CAAC,GAAG,GAAGhB,SAAS;MAC9BiB,GAAG,EAAE,CAAC,GAAGjB;IACX,CAAC;EACH;;EAEA;AACF;AACA;EACEQ,wBAAwBA,CAACR,SAAS,EAAE;IAClC,MAAM4C,WAAW,GAAGzB,IAAI,CAAC0B,GAAG,CAAC,GAAG,EAAE,IAAI,GAAG7C,SAAS,CAAC,CAAC,CAAC;;IAErD,OAAO;MACLY,WAAW,EAAE,CAACO,IAAI,CAAC2B,MAAM,CAAC,CAAC,GAAG,GAAG,IAAI,CAAC,GAAGF,WAAW;MACpD9B,QAAQ,EAAE,CAACK,IAAI,CAAC2B,MAAM,CAAC,CAAC,GAAG,GAAG,IAAI,EAAE,GAAGF,WAAW;MAClD7B,cAAc,EAAE,CAAC,GAAG,CAACI,IAAI,CAAC2B,MAAM,CAAC,CAAC,GAAG,GAAG,IAAI,GAAG,GAAGF,WAAW;MAC7D5B,YAAY,EAAE,CAACG,IAAI,CAAC2B,MAAM,CAAC,CAAC,GAAG,GAAG,IAAI,CAAC,GAAGF,WAAW;MACrD3B,GAAG,EAAE,CAACE,IAAI,CAAC2B,MAAM,CAAC,CAAC,GAAG,GAAG,IAAI,GAAG,GAAGF;IACrC,CAAC;EACH;;EAEA;AACF;AACA;EACE/B,sBAAsBA,CAACkC,SAAS,EAAEC,OAAO,EAAE;IACzC,IAAIC,MAAM,GAAGF,SAAS;IAEtBC,OAAO,CAACE,OAAO,CAACC,MAAM,IAAI;MACxB,IAAI,OAAOA,MAAM,KAAK,QAAQ,EAAE;QAC9BF,MAAM,IAAIE,MAAM;MAClB,CAAC,MAAM,IAAI,OAAOA,MAAM,KAAK,QAAQ,IAAIA,MAAM,CAACC,UAAU,EAAE;QAC1DH,MAAM,IAAIE,MAAM,CAACC,UAAU;MAC7B;IACF,CAAC,CAAC;IAEF,OAAOjC,IAAI,CAACkC,KAAK,CAACJ,MAAM,GAAG,EAAE,CAAC,GAAG,EAAE;EACrC;;EAEA;AACF;AACA;EACElE,yBAAyBA,CAAA,EAAG;IAC1B,OAAO;MACLuE,MAAM,EAAE;QAAEC,IAAI,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;QAAEzC,QAAQ,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;QAAEsB,aAAa,EAAE;MAAI,CAAC;MAClEoB,MAAM,EAAE;QAAED,IAAI,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;QAAEzC,QAAQ,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;QAAEsB,aAAa,EAAE;MAAI,CAAC;MAClEqB,MAAM,EAAE;QAAEF,IAAI,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;QAAEzC,QAAQ,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;QAAEsB,aAAa,EAAE;MAAI,CAAC;MAClEsB,MAAM,EAAE;QAAEH,IAAI,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;QAAEzC,QAAQ,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;QAAEsB,aAAa,EAAE;MAAI;IAClE,CAAC;EACH;;EAEA;AACF;AACA;EACEnD,wBAAwBA,CAAA,EAAG;IACzB,OAAO;MACL0E,oBAAoB,EAAE,EAAE;MAAE;MAC1BC,iBAAiB,EAAE,EAAE;MAAK;MAC1BC,cAAc,EAAE,GAAG,CAAO;IAC5B,CAAC;EACH;AACF;;AAEA;AACA;AACA;AACA,OAAO,MAAMC,sBAAsB,CAAC;EAClClF,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACmF,aAAa,GAAG,EAAE;IACvB,IAAI,CAACC,YAAY,GAAG,IAAI,CAACC,sBAAsB,CAAC,CAAC;EACnD;;EAEA;AACF;AACA;EACEC,oBAAoBA,CAACC,sBAAsB,EAAEC,WAAW,EAAEC,kBAAkB,EAAE;IAC5E,MAAMC,cAAc,GAAG,EAAE;IAEzBH,sBAAsB,CAACjB,OAAO,CAAC,CAACvD,UAAU,EAAE4E,KAAK,KAAK;MACpD,MAAM/E,GAAG,GAAG+E,KAAK,GAAG,CAAC;MACrB,MAAMC,OAAO,GAAG,EAAE;;MAElB;MACA,MAAMC,kBAAkB,GAAG,IAAI,CAACC,yBAAyB,CAAC/E,UAAU,CAAC;;MAErE;MACA,MAAMgF,YAAY,GAAG,IAAI,CAACC,mBAAmB,CAACR,WAAW,GAAGjD,IAAI,CAACO,KAAK,CAAClC,GAAG,GAAG,CAAC,CAAC,EAAEA,GAAG,CAAC;;MAErF;MACA,MAAMqF,iBAAiB,GAAG,IAAI,CAACC,wBAAwB,CAACnF,UAAU,EAAEH,GAAG,CAAC;MAExEgF,OAAO,CAAC3E,IAAI,CAAC,GAAG4E,kBAAkB,EAAE,GAAGE,YAAY,EAAE,GAAGE,iBAAiB,CAAC;MAE1E,IAAIL,OAAO,CAACO,MAAM,GAAG,CAAC,EAAE;QACtBT,cAAc,CAACzE,IAAI,CAAC;UAClBY,IAAI,EAAEd,UAAU,CAACc,IAAI;UACrBjB,GAAG,EAAEA,GAAG;UACR0B,UAAU,EAAEvB,UAAU,CAACuB,UAAU;UACjCsD,OAAO,EAAE,IAAI,CAACQ,iBAAiB,CAACR,OAAO,CAAC;UACxCS,SAAS,EAAE,IAAI,CAACC,gBAAgB,CAACV,OAAO,CAAC;UACzCW,QAAQ,EAAE,IAAI,CAACC,iBAAiB,CAACZ,OAAO;QAC1C,CAAC,CAAC;MACJ;IACF,CAAC,CAAC;IAEF,OAAOF,cAAc;EACvB;;EAEA;AACF;AACA;EACEI,yBAAyBA,CAAC/E,UAAU,EAAE;IACpC,MAAM6E,OAAO,GAAG,EAAE;IAElBa,MAAM,CAACC,IAAI,CAAC9G,mBAAmB,CAAC,CAAC0E,OAAO,CAACqC,MAAM,IAAI;MACjD,MAAMC,UAAU,GAAGhH,mBAAmB,CAAC+G,MAAM,CAAC;MAC9C,MAAME,KAAK,GAAG9F,UAAU,CAAC4F,MAAM,CAAC;MAEhC,IAAI,CAACE,KAAK,EAAE;MAEZ,IAAIA,KAAK,GAAGD,UAAU,CAACE,OAAO,CAAC,CAAC,CAAC,EAAE;QACjClB,OAAO,CAAC3E,IAAI,CAAC;UACX8F,IAAI,EAAE,aAAa;UACnBJ,MAAM,EAAEA,MAAM;UACdK,KAAK,EAAE,eAAe;UACtBC,WAAW,EAAE,GAAGL,UAAU,CAACK,WAAW,mBAAmBJ,KAAK,GAAGD,UAAU,CAACM,IAAI,GAAG;UACnFC,MAAM,EAAE,IAAI,CAACC,oBAAoB,CAACT,MAAM,CAAC;UACzCU,OAAO,EAAER,KAAK,GAAGD,UAAU,CAACU,WAAW,GAAG,UAAU,GAAG,MAAM;UAC7DC,iBAAiB,EAAE,IAAI,CAACC,iBAAiB,CAACb,MAAM,EAAE,KAAK,CAAC;UACxDc,aAAa,EAAE,IAAI,CAACC,aAAa,CAACf,MAAM,EAAE,KAAK;QACjD,CAAC,CAAC;MACJ,CAAC,MAAM,IAAIE,KAAK,GAAGD,UAAU,CAACE,OAAO,CAAC,CAAC,CAAC,EAAE;QACxClB,OAAO,CAAC3E,IAAI,CAAC;UACX8F,IAAI,EAAE,aAAa;UACnBJ,MAAM,EAAEA,MAAM;UACdK,KAAK,EAAE,eAAe;UACtBC,WAAW,EAAE,GAAGL,UAAU,CAACK,WAAW,mBAAmBJ,KAAK,GAAGD,UAAU,CAACM,IAAI,GAAG;UACnFC,MAAM,EAAE,IAAI,CAACQ,qBAAqB,CAAChB,MAAM,CAAC;UAC1CU,OAAO,EAAER,KAAK,GAAGD,UAAU,CAACgB,YAAY,GAAG,UAAU,GAAG,MAAM;UAC9DL,iBAAiB,EAAE,IAAI,CAACC,iBAAiB,CAACb,MAAM,EAAE,MAAM,CAAC;UACzDc,aAAa,EAAE,IAAI,CAACC,aAAa,CAACf,MAAM,EAAE,MAAM;QAClD,CAAC,CAAC;MACJ;IACF,CAAC,CAAC;IAEF,OAAOf,OAAO;EAChB;;EAEA;AACF;AACA;EACEI,mBAAmBA,CAAC6B,IAAI,EAAEjH,GAAG,EAAE;IAC7B,MAAMgF,OAAO,GAAG,EAAE;IAClB,MAAMkC,KAAK,GAAG,IAAI,CAACC,qBAAqB,CAACF,IAAI,CAAC;IAE9C,IAAI,CAACC,KAAK,EAAE,OAAOlC,OAAO;;IAE1B;IACA,IAAIhF,GAAG,GAAG,CAAC,KAAK,CAAC,EAAE;MAAE;MACnBgF,OAAO,CAAC3E,IAAI,CAAC;QACX8F,IAAI,EAAE,SAAS;QACfiB,QAAQ,EAAE,mBAAmB;QAC7Bf,WAAW,EAAE,GAAGa,KAAK,CAACA,KAAK,WAAW;QACtCX,MAAM,EAAE,eAAe;QACvBE,OAAO,EAAE,KAAK;QACdE,iBAAiB,EAAE,KAAK;QACxBE,aAAa,EAAE;MACjB,CAAC,CAAC;IACJ;;IAEA;IACAK,KAAK,CAACG,aAAa,CAAC3D,OAAO,CAAC4D,YAAY,IAAI;MAC1C,MAAMC,eAAe,GAAG,IAAI,CAACC,kBAAkB,CAACF,YAAY,EAAEL,IAAI,EAAEjH,GAAG,CAAC;MACxE,IAAIuH,eAAe,EAAE;QACnBvC,OAAO,CAAC3E,IAAI,CAACkH,eAAe,CAAC;MAC/B;IACF,CAAC,CAAC;IAEF,OAAOvC,OAAO;EAChB;;EAEA;AACF;AACA;EACEM,wBAAwBA,CAACnF,UAAU,EAAEH,GAAG,EAAE;IACxC,MAAMgF,OAAO,GAAG,EAAE;;IAElB;IACA,IAAI7E,UAAU,CAACmB,QAAQ,GAAG,EAAE,IAAInB,UAAU,CAACiB,WAAW,GAAG,EAAE,EAAE;MAC3D4D,OAAO,CAAC3E,IAAI,CAAC;QACX8F,IAAI,EAAE,YAAY;QAClBiB,QAAQ,EAAE,oBAAoB;QAC9Bf,WAAW,EAAE,yBAAyB;QACtCE,MAAM,EAAE,uBAAuB;QAC/BE,OAAO,EAAE,QAAQ;QACjBE,iBAAiB,EAAE,KAAK;QACxBE,aAAa,EAAE;MACjB,CAAC,CAAC;IACJ;;IAEA;IACA,IAAIlF,IAAI,CAAC8F,GAAG,CAACtH,UAAU,CAACiB,WAAW,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE;MAC7C4D,OAAO,CAAC3E,IAAI,CAAC;QACX8F,IAAI,EAAE,YAAY;QAClBiB,QAAQ,EAAE,mBAAmB;QAC7Bf,WAAW,EAAE,eAAe;QAC5BE,MAAM,EAAE,mBAAmB;QAC3BE,OAAO,EAAE,QAAQ;QACjBE,iBAAiB,EAAE,KAAK;QACxBE,aAAa,EAAE;MACjB,CAAC,CAAC;IACJ;IAEA,OAAO7B,OAAO;EAChB;;EAEA;AACF;AACA;EACEQ,iBAAiBA,CAACR,OAAO,EAAE;IACzB,MAAM0C,YAAY,GAAG;MAAEC,QAAQ,EAAE,CAAC;MAAEC,IAAI,EAAE,CAAC;MAAEC,MAAM,EAAE,CAAC;MAAEC,GAAG,EAAE;IAAE,CAAC;IAEhE,OAAO9C,OAAO,CAAC+C,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;MAC5B;MACA,MAAMC,WAAW,GAAGR,YAAY,CAACO,CAAC,CAACxB,OAAO,CAAC,GAAGiB,YAAY,CAACM,CAAC,CAACvB,OAAO,CAAC;MACrE,IAAIyB,WAAW,KAAK,CAAC,EAAE,OAAOA,WAAW;;MAEzC;MACA,OAAOF,CAAC,CAACnB,aAAa,GAAGoB,CAAC,CAACpB,aAAa;IAC1C,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;EACEL,oBAAoBA,CAACT,MAAM,EAAE;IAC3B,MAAMoC,SAAS,GAAG;MAChB/G,WAAW,EAAE,WAAW;MACxBE,QAAQ,EAAE,kBAAkB;MAC5BE,YAAY,EAAE,OAAO;MACrBD,cAAc,EAAE,YAAY;MAC5BE,GAAG,EAAE,YAAY;MACjB2G,MAAM,EAAE,eAAe;MACvBvF,SAAS,EAAE;IACb,CAAC;IACD,OAAOsF,SAAS,CAACpC,MAAM,CAAC,IAAI,QAAQ;EACtC;;EAEA;AACF;AACA;EACEgB,qBAAqBA,CAAChB,MAAM,EAAE;IAC5B,MAAMoC,SAAS,GAAG;MAChB/G,WAAW,EAAE,iBAAiB;MAC9BE,QAAQ,EAAE,iBAAiB;MAC3BE,YAAY,EAAE,eAAe;MAC7BD,cAAc,EAAE,QAAQ;MACxBE,GAAG,EAAE,eAAe;MACpB2G,MAAM,EAAE,cAAc;MACtBvF,SAAS,EAAE;IACb,CAAC;IACD,OAAOsF,SAAS,CAACpC,MAAM,CAAC,IAAI,QAAQ;EACtC;;EAEA;AACF;AACA;EACEa,iBAAiBA,CAACb,MAAM,EAAEsC,SAAS,EAAE;IAAA,IAAAC,mBAAA;IACnC,MAAMC,WAAW,GAAG;MAClBnH,WAAW,EAAE;QAAE0G,GAAG,EAAE,OAAO;QAAEF,IAAI,EAAE;MAAQ,CAAC;MAC5CtG,QAAQ,EAAE;QAAEwG,GAAG,EAAE,SAAS;QAAEF,IAAI,EAAE;MAAQ,CAAC;MAC3CpG,YAAY,EAAE;QAAEsG,GAAG,EAAE,QAAQ;QAAEF,IAAI,EAAE;MAAQ,CAAC;MAC9CrG,cAAc,EAAE;QAAEuG,GAAG,EAAE,IAAI;QAAEF,IAAI,EAAE;MAAM,CAAC;MAC1CnG,GAAG,EAAE;QAAEqG,GAAG,EAAE,IAAI;QAAEF,IAAI,EAAE;MAAM;IAChC,CAAC;IACD,OAAO,EAAAU,mBAAA,GAAAC,WAAW,CAACxC,MAAM,CAAC,cAAAuC,mBAAA,uBAAnBA,mBAAA,CAAsBD,SAAS,CAAC,KAAI,KAAK;EAClD;;EAEA;AACF;AACA;EACEvB,aAAaA,CAACf,MAAM,EAAEsC,SAAS,EAAE;IAAA,IAAAG,eAAA;IAC/B,MAAMC,OAAO,GAAG;MACdrH,WAAW,EAAE;QAAE0G,GAAG,EAAE,KAAK;QAAEF,IAAI,EAAE;MAAK,CAAC;MACvCtG,QAAQ,EAAE;QAAEwG,GAAG,EAAE,IAAI;QAAEF,IAAI,EAAE;MAAM,CAAC;MACpCpG,YAAY,EAAE;QAAEsG,GAAG,EAAE,IAAI;QAAEF,IAAI,EAAE;MAAK,CAAC;MACvCrG,cAAc,EAAE;QAAEuG,GAAG,EAAE,KAAK;QAAEF,IAAI,EAAE;MAAK,CAAC;MAC1CnG,GAAG,EAAE;QAAEqG,GAAG,EAAE,KAAK;QAAEF,IAAI,EAAE;MAAK;IAChC,CAAC;IACD,OAAO,EAAAY,eAAA,GAAAC,OAAO,CAAC1C,MAAM,CAAC,cAAAyC,eAAA,uBAAfA,eAAA,CAAkBH,SAAS,CAAC,KAAI,KAAK;EAC9C;;EAEA;AACF;AACA;EACElB,qBAAqBA,CAACF,IAAI,EAAE;IAC1B,MAAMyB,gBAAgB,GAAGzJ,aAAa,CAAC0J,UAAU;IACjD,OAAOD,gBAAgB,CAACE,IAAI,CAAC1B,KAAK,IAChCD,IAAI,IAAIC,KAAK,CAAC2B,KAAK,CAAC,CAAC,CAAC,IAAI5B,IAAI,IAAIC,KAAK,CAAC2B,KAAK,CAAC,CAAC,CACjD,CAAC;EACH;;EAEA;AACF;AACA;EACErB,kBAAkBA,CAACF,YAAY,EAAEL,IAAI,EAAEjH,GAAG,EAAE;IAC1C,MAAM8E,cAAc,GAAG;MACrB,IAAI,EAAE;QAAE+D,KAAK,EAAE,CAAC,CAAC,CAAC;QAAExC,WAAW,EAAE;MAAa,CAAC;MAC/C,MAAM,EAAE;QAAEwC,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;QAAExC,WAAW,EAAE;MAAa,CAAC;MACpD,MAAM,EAAE;QAAEwC,KAAK,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;QAAEC,SAAS,EAAE,OAAO;QAAEzC,WAAW,EAAE;MAAc,CAAC;MAC1E,MAAM,EAAE;QAAEwC,KAAK,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;QAAEC,SAAS,EAAE,YAAY;QAAEzC,WAAW,EAAE;MAAW,CAAC;MAC5E,MAAM,EAAE;QAAEwC,KAAK,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;QAAEC,SAAS,EAAE,QAAQ;QAAEzC,WAAW,EAAE;MAAY,CAAC;MACzE,MAAM,EAAE;QAAEwC,KAAK,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;QAAExC,WAAW,EAAE;MAAoB,CAAC;MAC7D,MAAM,EAAE;QAAEwC,KAAK,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;QAAExC,WAAW,EAAE;MAAY,CAAC;MACrD,MAAM,EAAE;QAAEwC,KAAK,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;QAAEC,SAAS,EAAE,OAAO;QAAEzC,WAAW,EAAE;MAAa,CAAC;MAC1E,IAAI,EAAE;QAAEwC,KAAK,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;QAAEC,SAAS,EAAE,OAAO;QAAEzC,WAAW,EAAE;MAAW;IACvE,CAAC;IAED,MAAM0C,QAAQ,GAAGjE,cAAc,CAACwC,YAAY,CAAC;IAC7C,IAAI,CAACyB,QAAQ,EAAE,OAAO,IAAI;IAE1B,MAAMC,aAAa,GAAGD,QAAQ,CAACF,KAAK,CAACtD,MAAM,KAAK,CAAC,GAC/C0B,IAAI,KAAK8B,QAAQ,CAACF,KAAK,CAAC,CAAC,CAAC,GAC1B5B,IAAI,IAAI8B,QAAQ,CAACF,KAAK,CAAC,CAAC,CAAC,IAAI5B,IAAI,IAAI8B,QAAQ,CAACF,KAAK,CAAC,CAAC,CAAC;IAExD,IAAI,CAACG,aAAa,EAAE,OAAO,IAAI;IAE/B,MAAMC,aAAa,GAAGF,QAAQ,CAACD,SAAS,KAAK,OAAO,IAC9BC,QAAQ,CAACD,SAAS,KAAK,QAAQ,IAAI9I,GAAG,GAAG,CAAC,KAAK,CAAE,IACjD+I,QAAQ,CAACD,SAAS,KAAK,YAAa,IACpC,CAACC,QAAQ,CAACD,SAAS,IAAI9I,GAAG,KAAK,CAAE;IAEvD,IAAI,CAACiJ,aAAa,EAAE,OAAO,IAAI;IAE/B,OAAO;MACL9C,IAAI,EAAE,WAAW;MACjBiB,QAAQ,EAAEE,YAAY;MACtBjB,WAAW,EAAE0C,QAAQ,CAAC1C,WAAW;MACjCE,MAAM,EAAE,GAAGe,YAAY,KAAK;MAC5Bb,OAAO,EAAE,QAAQ;MACjBE,iBAAiB,EAAE,IAAI,CAACuC,eAAe,CAAC5B,YAAY,CAAC;MACrDT,aAAa,EAAE,IAAI,CAACsC,WAAW,CAAC7B,YAAY;IAC9C,CAAC;EACH;;EAEA;AACF;AACA;EACE4B,eAAeA,CAACE,IAAI,EAAE;IACpB,MAAMC,SAAS,GAAG;MAChB,IAAI,EAAE,OAAO;MACb,MAAM,EAAE,KAAK;MACb,MAAM,EAAE,KAAK;MACb,MAAM,EAAE,KAAK;MACb,MAAM,EAAE,KAAK;MACb,MAAM,EAAE,KAAK;MACb,MAAM,EAAE,KAAK;MACb,MAAM,EAAE,OAAO;MACf,IAAI,EAAE;IACR,CAAC;IACD,OAAOA,SAAS,CAACD,IAAI,CAAC,IAAI,KAAK;EACjC;;EAEA;AACF;AACA;EACED,WAAWA,CAACC,IAAI,EAAE;IAChB,MAAME,KAAK,GAAG;MACZ,IAAI,EAAE,KAAK;MACX,MAAM,EAAE,IAAI;MACZ,MAAM,EAAE,IAAI;MACZ,MAAM,EAAE,KAAK;MACb,MAAM,EAAE,KAAK;MACb,MAAM,EAAE,KAAK;MACb,MAAM,EAAE,IAAI;MACZ,MAAM,EAAE,KAAK;MACb,IAAI,EAAE;IACR,CAAC;IACD,OAAOA,KAAK,CAACF,IAAI,CAAC,IAAI,KAAK;EAC7B;;EAEA;AACF;AACA;EACE1D,gBAAgBA,CAACV,OAAO,EAAE;IACxB,OAAOA,OAAO,CAACuE,MAAM,CAAC,CAACC,KAAK,EAAEjD,MAAM,KAAKiD,KAAK,IAAIjD,MAAM,CAACM,aAAa,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC;EAClF;;EAEA;AACF;AACA;EACEjB,iBAAiBA,CAACZ,OAAO,EAAE;IACzB,MAAMyE,WAAW,GAAG;MAClB,IAAI,EAAE,GAAG;MACT,QAAQ,EAAE,GAAG;MACb,KAAK,EAAE,GAAG;MACV,KAAK,EAAE,CAAC;MACR,KAAK,EAAE,CAAC;MACR,OAAO,EAAE,GAAG;MACZ,KAAK,EAAE;IACT,CAAC;IAED,OAAOzE,OAAO,CAACuE,MAAM,CAAC,CAACC,KAAK,EAAEjD,MAAM,KAAK;MACvC,MAAMmD,QAAQ,GAAGnD,MAAM,CAACI,iBAAiB;MACzC,OAAO6C,KAAK,IAAIC,WAAW,CAACC,QAAQ,CAAC,IAAI,CAAC,CAAC;IAC7C,CAAC,EAAE,CAAC,CAAC;EACP;;EAEA;AACF;AACA;EACEjF,sBAAsBA,CAAA,EAAG;IACvB,OAAO;MACLkE,UAAU,EAAE;QACVgB,QAAQ,EAAE;UAAE5H,KAAK,EAAE,CAAC;UAAEsE,WAAW,EAAE;QAAW,CAAC;QAC/CuD,SAAS,EAAE;UAAE7H,KAAK,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC;UAAEsE,WAAW,EAAE;QAAQ,CAAC;QAC1DwD,OAAO,EAAE;UAAE9H,KAAK,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;UAAEsE,WAAW,EAAE;QAAQ,CAAC;QAC7DyD,WAAW,EAAE;UAAE/H,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;UAAEsE,WAAW,EAAE;QAAa;MAC7D;IACF,CAAC;EACH;AACF;;AAEA;AACA;AACA;AACA,OAAO,MAAM0D,0BAA0B,CAAC;EACtC3K,WAAWA,CAAA,EAAG;IACZ,IAAI,CAAC4K,iBAAiB,GAAG,IAAI7K,2BAA2B,CAAC,CAAC;IAC1D,IAAI,CAAC8K,YAAY,GAAG,IAAI3F,sBAAsB,CAAC,CAAC;EAClD;;EAEA;AACF;AACA;EACE4F,0BAA0BA,CAACC,YAAY,EAAEvK,eAAe,GAAG,CAAC,CAAC,EAAE;IAC7D,MAAM;MACJwK,WAAW,EAAEzK,kBAAkB;MAC/BsH,IAAI,EAAErC,WAAW;MACjByF,WAAW,EAAExF;IACf,CAAC,GAAGsF,YAAY;;IAEhB;IACA,MAAMxF,sBAAsB,GAAG,IAAI,CAACqF,iBAAiB,CAACtK,sBAAsB,CAC1EC,kBAAkB,EAClBC,eACF,CAAC;;IAED;IACA,MAAMkF,cAAc,GAAG,IAAI,CAACmF,YAAY,CAACvF,oBAAoB,CAC3DC,sBAAsB,EACtBC,WAAW,EACXC,kBACF,CAAC;;IAED;IACA,MAAMyF,QAAQ,GAAG,IAAI,CAACC,6BAA6B,CACjD5F,sBAAsB,EACtBG,cACF,CAAC;IAED,OAAO;MACLH,sBAAsB;MACtBG,cAAc;MACdwF,QAAQ;MACRE,eAAe,EAAE,IAAI,CAACC,uBAAuB,CAACH,QAAQ,CAAC;MACvDI,cAAc,EAAE,IAAI,CAACC,WAAW,CAAChG,sBAAsB,EAAEG,cAAc;IACzE,CAAC;EACH;;EAEA;AACF;AACA;EACEyF,6BAA6BA,CAAC5F,sBAAsB,EAAEG,cAAc,EAAE;IACpE,MAAM8F,YAAY,GAAG9F,cAAc,CAACyE,MAAM,CAAC,CAACsB,GAAG,EAAE7K,GAAG,KAAK6K,GAAG,GAAG7K,GAAG,CAACgF,OAAO,CAACO,MAAM,EAAE,CAAC,CAAC;IACrF,MAAME,SAAS,GAAGX,cAAc,CAACyE,MAAM,CAAC,CAACsB,GAAG,EAAE7K,GAAG,KAAK6K,GAAG,GAAG7K,GAAG,CAACyF,SAAS,EAAE,CAAC,CAAC;IAC7E,MAAMqF,aAAa,GAAGnG,sBAAsB,CAAC4E,MAAM,CAAC,CAACsB,GAAG,EAAEE,IAAI,KAAKF,GAAG,GAAGE,IAAI,CAACrJ,UAAU,EAAE,CAAC,CAAC,GAAGiD,sBAAsB,CAACY,MAAM;IAE5H,MAAMyF,YAAY,GAAGlG,cAAc,CAACmG,MAAM,CAACjL,GAAG,IAC5CA,GAAG,CAACgF,OAAO,CAACkG,IAAI,CAAC3E,MAAM,IAAIA,MAAM,CAACE,OAAO,KAAK,UAAU,CAC1D,CAAC,CAAClB,MAAM;IAER,OAAO;MACL4F,OAAO,EAAE;QACPP,YAAY;QACZnF,SAAS;QACTqF,aAAa,EAAEnJ,IAAI,CAACkC,KAAK,CAACiH,aAAa,GAAG,GAAG,CAAC;QAC9CE,YAAY;QACZI,YAAY,EAAEzJ,IAAI,CAACC,GAAG,CAAC,GAAGkD,cAAc,CAACuG,GAAG,CAACrL,GAAG,IAAIA,GAAG,CAAC2F,QAAQ,CAAC;MACnE,CAAC;MACD2F,MAAM,EAAE;QACNC,gBAAgB,EAAE,IAAI,CAACC,cAAc,CAAC7G,sBAAsB,EAAE,aAAa,CAAC;QAC5E8G,aAAa,EAAE,IAAI,CAACD,cAAc,CAAC7G,sBAAsB,EAAE,UAAU,CAAC;QACtE+G,SAAS,EAAE,IAAI,CAACC,kBAAkB,CAAC7G,cAAc;MACnD;IACF,CAAC;EACH;;EAEA;AACF;AACA;EACE2F,uBAAuBA,CAACH,QAAQ,EAAE;IAChC,MAAME,eAAe,GAAG,EAAE;IAE1B,IAAIF,QAAQ,CAACa,OAAO,CAACH,YAAY,GAAG,CAAC,EAAE;MACrCR,eAAe,CAACnK,IAAI,CAAC;QACnB8F,IAAI,EAAE,QAAQ;QACdyF,KAAK,EAAE,gBAAgB;QACvBvF,WAAW,EAAE,WAAWiE,QAAQ,CAACa,OAAO,CAACH,YAAY,kDAAkD;QACvGa,QAAQ,EAAE;MACZ,CAAC,CAAC;IACJ;IAEA,IAAIvB,QAAQ,CAACa,OAAO,CAAC1F,SAAS,GAAG,MAAM,EAAE;MACvC+E,eAAe,CAACnK,IAAI,CAAC;QACnB8F,IAAI,EAAE,UAAU;QAChByF,KAAK,EAAE,cAAc;QACrBvF,WAAW,EAAE,aAAaiE,QAAQ,CAACa,OAAO,CAAC1F,SAAS,CAACqG,cAAc,CAAC,CAAC,6CAA6C;QAClHD,QAAQ,EAAE;MACZ,CAAC,CAAC;IACJ;IAEA,IAAIvB,QAAQ,CAACa,OAAO,CAACL,aAAa,GAAG,EAAE,EAAE;MACvCN,eAAe,CAACnK,IAAI,CAAC;QACnB8F,IAAI,EAAE,YAAY;QAClByF,KAAK,EAAE,YAAY;QACnBvF,WAAW,EAAE,WAAWiE,QAAQ,CAACa,OAAO,CAACL,aAAa,iDAAiD;QACvGe,QAAQ,EAAE;MACZ,CAAC,CAAC;IACJ;IAEA,OAAOrB,eAAe;EACxB;;EAEA;AACF;AACA;EACEG,WAAWA,CAAChG,sBAAsB,EAAEG,cAAc,EAAE;IAClD,MAAMiH,KAAK,GAAG,EAAE;;IAEhB;IACApH,sBAAsB,CAACjB,OAAO,CAAC,CAACvD,UAAU,EAAE4E,KAAK,KAAK;MACpD,MAAMiH,iBAAiB,GAAG,IAAI,CAACC,yBAAyB,CAAC9L,UAAU,CAAC;MACpE,IAAI6L,iBAAiB,CAACzG,MAAM,GAAG,CAAC,EAAE;QAChCwG,KAAK,CAAC1L,IAAI,CAAC;UACTL,GAAG,EAAE+E,KAAK,GAAG,CAAC;UACd9D,IAAI,EAAEd,UAAU,CAACc,IAAI;UACrBkF,IAAI,EAAE,aAAa;UACnB+F,KAAK,EAAE,IAAI,CAACC,kBAAkB,CAACH,iBAAiB,CAAC;UACjDI,UAAU,EAAEJ,iBAAiB;UAC7BK,MAAM,EAAE;QACV,CAAC,CAAC;MACJ;IACF,CAAC,CAAC;;IAEF;IACA,MAAMC,gBAAgB,GAAGxH,cAAc,CAACmG,MAAM,CAACjL,GAAG,IAAIA,GAAG,CAAC2F,QAAQ,GAAG,CAAC,CAAC;IACvE,IAAI2G,gBAAgB,CAAC/G,MAAM,GAAG,CAAC,EAAE;MAC/BwG,KAAK,CAAC1L,IAAI,CAAC;QACT8F,IAAI,EAAE,UAAU;QAChB+F,KAAK,EAAE,QAAQ;QACfK,IAAI,EAAED,gBAAgB,CAACjB,GAAG,CAACrL,GAAG,IAAIA,GAAG,CAACA,GAAG,CAAC;QAC1CqM,MAAM,EAAE;MACV,CAAC,CAAC;IACJ;IAEA,OAAON,KAAK;EACd;;EAEA;AACF;AACA;EACEE,yBAAyBA,CAAC9L,UAAU,EAAE;IACpC,MAAMqM,QAAQ,GAAG,EAAE;IAEnB3G,MAAM,CAACC,IAAI,CAAC9G,mBAAmB,CAAC,CAAC0E,OAAO,CAACqC,MAAM,IAAI;MACjD,MAAMC,UAAU,GAAGhH,mBAAmB,CAAC+G,MAAM,CAAC;MAC9C,MAAME,KAAK,GAAG9F,UAAU,CAAC4F,MAAM,CAAC;MAEhC,IAAI,CAACE,KAAK,EAAE;MAEZ,IAAIA,KAAK,GAAGD,UAAU,CAACU,WAAW,EAAE;QAClC8F,QAAQ,CAACnM,IAAI,CAAC;UACZ0F,MAAM;UACNE,KAAK;UACLnE,SAAS,EAAE,gBAAgB;UAC3BuE,WAAW,EAAE,GAAGL,UAAU,CAACK,WAAW,WAAWJ,KAAK,GAAGD,UAAU,CAACM,IAAI;QAC1E,CAAC,CAAC;MACJ,CAAC,MAAM,IAAIL,KAAK,GAAGD,UAAU,CAACgB,YAAY,EAAE;QAC1CwF,QAAQ,CAACnM,IAAI,CAAC;UACZ0F,MAAM;UACNE,KAAK;UACLnE,SAAS,EAAE,iBAAiB;UAC5BuE,WAAW,EAAE,GAAGL,UAAU,CAACK,WAAW,WAAWJ,KAAK,GAAGD,UAAU,CAACM,IAAI;QAC1E,CAAC,CAAC;MACJ;IACF,CAAC,CAAC;IAEF,OAAOkG,QAAQ;EACjB;;EAEA;AACF;AACA;EACEL,kBAAkBA,CAACH,iBAAiB,EAAE;IACpC,IAAIA,iBAAiB,CAACzG,MAAM,IAAI,CAAC,EAAE,OAAO,UAAU;IACpD,IAAIyG,iBAAiB,CAACzG,MAAM,IAAI,CAAC,EAAE,OAAO,MAAM;IAChD,IAAIyG,iBAAiB,CAACzG,MAAM,IAAI,CAAC,EAAE,OAAO,QAAQ;IAClD,OAAO,KAAK;EACd;;EAEA;AACF;AACA;EACEiG,cAAcA,CAAC3L,WAAW,EAAE4M,KAAK,EAAE;IACjC,IAAI5M,WAAW,CAAC0F,MAAM,GAAG,CAAC,EAAE,OAAO,QAAQ;IAE3C,MAAMmH,UAAU,GAAG7M,WAAW,CAAC,CAAC,CAAC,CAAC4M,KAAK,CAAC;IACxC,MAAME,SAAS,GAAG9M,WAAW,CAACA,WAAW,CAAC0F,MAAM,GAAG,CAAC,CAAC,CAACkH,KAAK,CAAC;IAC5D,MAAMG,MAAM,GAAI,CAACD,SAAS,GAAGD,UAAU,IAAIA,UAAU,GAAI,GAAG;IAE5D,IAAIE,MAAM,GAAG,CAAC,EAAE,OAAO,YAAY;IACnC,IAAIA,MAAM,GAAG,CAAC,CAAC,EAAE,OAAO,YAAY;IACpC,OAAO,QAAQ;EACjB;;EAEA;AACF;AACA;EACEjB,kBAAkBA,CAAC7G,cAAc,EAAE;IACjC,MAAM+H,UAAU,GAAG/H,cAAc,CAACuG,GAAG,CAACrL,GAAG,IAAI;MAC3C,MAAM8M,aAAa,GAAG9M,GAAG,CAACgF,OAAO,CAACiG,MAAM,CAACjD,CAAC,IAAIA,CAAC,CAACvB,OAAO,KAAK,UAAU,CAAC,CAAClB,MAAM;MAC9E,MAAMwH,SAAS,GAAG/M,GAAG,CAACgF,OAAO,CAACiG,MAAM,CAACjD,CAAC,IAAIA,CAAC,CAACvB,OAAO,KAAK,MAAM,CAAC,CAAClB,MAAM;MACtE,OAAOuH,aAAa,GAAG,CAAC,GAAGC,SAAS,GAAG,CAAC;IAC1C,CAAC,CAAC;IAEF,IAAIF,UAAU,CAACtH,MAAM,GAAG,CAAC,EAAE,OAAO,QAAQ;IAE1C,MAAMyH,KAAK,GAAGH,UAAU,CAACA,UAAU,CAACtH,MAAM,GAAG,CAAC,CAAC,GAAGsH,UAAU,CAAC,CAAC,CAAC;IAC/D,IAAIG,KAAK,GAAG,CAAC,EAAE,OAAO,YAAY;IAClC,IAAIA,KAAK,GAAG,CAAC,CAAC,EAAE,OAAO,YAAY;IACnC,OAAO,QAAQ;EACjB;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}