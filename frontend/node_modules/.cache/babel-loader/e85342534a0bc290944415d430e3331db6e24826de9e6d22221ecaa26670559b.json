{"ast":null,"code":"/**\n * 가상 온실 환경 시뮬레이터\n * 환경 데이터, 조치사항, 예측 알고리즘을 통합 관리\n */\n\n// 온실 환경 센서 데이터 정의\nexport const ENVIRONMENT_SENSORS = {\n  temperature: {\n    min: 5,\n    max: 40,\n    optimal: [18, 25],\n    unit: '°C',\n    description: '온실 내부 온도',\n    criticalLow: 10,\n    criticalHigh: 35\n  },\n  humidity: {\n    min: 30,\n    max: 95,\n    optimal: [60, 75],\n    unit: '%',\n    description: '상대 습도',\n    criticalLow: 40,\n    criticalHigh: 85\n  },\n  co2: {\n    min: 300,\n    max: 1500,\n    optimal: [400, 800],\n    unit: 'ppm',\n    description: '이산화탄소 농도',\n    criticalLow: 350,\n    criticalHigh: 1200\n  },\n  lightIntensity: {\n    min: 0,\n    max: 50000,\n    optimal: [20000, 40000],\n    unit: 'lux',\n    description: '광량',\n    criticalLow: 15000,\n    criticalHigh: 45000\n  },\n  soilMoisture: {\n    min: 20,\n    max: 80,\n    optimal: [40, 65],\n    unit: '%',\n    description: '토양 수분',\n    criticalLow: 30,\n    criticalHigh: 75\n  },\n  soilPH: {\n    min: 5.0,\n    max: 8.0,\n    optimal: [6.0, 6.8],\n    unit: 'pH',\n    description: '토양 산도',\n    criticalLow: 5.5,\n    criticalHigh: 7.5\n  },\n  soilTemperature: {\n    min: 10,\n    max: 35,\n    optimal: [15, 25],\n    unit: '°C',\n    description: '지온',\n    criticalLow: 12,\n    criticalHigh: 30\n  },\n  windSpeed: {\n    min: 0,\n    max: 5,\n    optimal: [0.5, 2.0],\n    unit: 'm/s',\n    description: '환기 풍속',\n    criticalLow: 0.2,\n    criticalHigh: 3.0\n  }\n};\n\n// 작물 생육 단계 정의 (딸기 기준)\nexport const GROWTH_STAGES = {\n  strawberry: [{\n    weeks: [1, 4],\n    stage: '정식기',\n    description: '묘 정식 및 활착',\n    keyMetrics: ['soilMoisture', 'soilTemperature', 'humidity'],\n    targetActions: ['정식', '활착관리', '토양조성']\n  }, {\n    weeks: [5, 12],\n    stage: '영양생장기',\n    description: '잎과 뿌리 발달',\n    keyMetrics: ['temperature', 'lightIntensity', 'co2'],\n    targetActions: ['관수관리', '온도관리', '병해예방', '엽면시비']\n  }, {\n    weeks: [13, 20],\n    stage: '화아분화기',\n    description: '꽃눈 형성',\n    keyMetrics: ['temperature', 'lightIntensity'],\n    targetActions: ['저온처리', '일장조절', '영양관리', '적심']\n  }, {\n    weeks: [21, 28],\n    stage: '개화기',\n    description: '개화 및 수분',\n    keyMetrics: ['humidity', 'temperature', 'windSpeed'],\n    targetActions: ['수분관리', '온도조절', '환기관리', '꽃솎기']\n  }, {\n    weeks: [29, 40],\n    stage: '결실기',\n    description: '과실 비대',\n    keyMetrics: ['soilMoisture', 'temperature', 'lightIntensity'],\n    targetActions: ['과실관리', '적과', '품질관리', '칼슘공급']\n  }, {\n    weeks: [41, 52],\n    stage: '수확기',\n    description: '수확 및 품질 유지',\n    keyMetrics: ['humidity', 'temperature'],\n    targetActions: ['수확', '품질선별', '저장관리', '다음기작준비']\n  }]\n};\n\n// 조치사항 매트릭스\nexport const ACTION_MATRIX = {\n  temperature: {\n    tooLow: {\n      action: 'heating',\n      description: '난방 시스템 가동',\n      methods: ['온풍기 가동', '보온커튼 설치', '열펌프 운전'],\n      urgency: 'high',\n      duration: '2-4시간',\n      cost: 'medium'\n    },\n    tooHigh: {\n      action: 'cooling',\n      description: '냉각 시스템 가동',\n      methods: ['환기팬 가동', '차광막 설치', '미스트 분무', '지붕 환기창 개방'],\n      urgency: 'high',\n      duration: '1-3시간',\n      cost: 'low'\n    }\n  },\n  humidity: {\n    tooLow: {\n      action: 'humidification',\n      description: '가습 실시',\n      methods: ['미스트 분무', '젖은 수건 설치', '물 증발판 설치'],\n      urgency: 'medium',\n      duration: '30분-1시간',\n      cost: 'low'\n    },\n    tooHigh: {\n      action: 'dehumidification',\n      description: '제습 실시',\n      methods: ['환기 강화', '제습기 가동', '난방으로 습도 조절'],\n      urgency: 'medium',\n      duration: '1-2시간',\n      cost: 'medium'\n    }\n  },\n  soilMoisture: {\n    tooLow: {\n      action: 'irrigation',\n      description: '관수 실시',\n      methods: ['점적관수', '스프링클러', '저면관수'],\n      urgency: 'high',\n      duration: '15-30분',\n      cost: 'low'\n    },\n    tooHigh: {\n      action: 'drainage',\n      description: '배수 및 건조',\n      methods: ['배수로 개방', '환기 강화', '관수 중단'],\n      urgency: 'medium',\n      duration: '4-8시간',\n      cost: 'low'\n    }\n  },\n  lightIntensity: {\n    tooLow: {\n      action: 'supplementalLighting',\n      description: '보광 실시',\n      methods: ['LED 보광등', 'HPS 램프', '형광등'],\n      urgency: 'low',\n      duration: '4-8시간',\n      cost: 'high'\n    },\n    tooHigh: {\n      action: 'shading',\n      description: '차광 실시',\n      methods: ['차광막 설치', '차광도료 도포', '자연 차광'],\n      urgency: 'medium',\n      duration: '지속적',\n      cost: 'medium'\n    }\n  },\n  co2: {\n    tooLow: {\n      action: 'co2Injection',\n      description: 'CO2 공급',\n      methods: ['CO2 발생기', '드라이아이스', '연소식 CO2 공급'],\n      urgency: 'low',\n      duration: '2-4시간',\n      cost: 'medium'\n    }\n  }\n};\n\n// 생육 예측 알고리즘\nexport const GROWTH_PREDICTION_ALGORITHM = {\n  /**\n   * 현재 환경 조건에서 7일 후 생육 상태 예측\n   */\n  predictGrowth: (currentEnvironment, currentGrowth, currentWeek) => {\n    const stage = getCurrentGrowthStage(currentWeek);\n    const environmentScore = calculateEnvironmentScore(currentEnvironment, stage);\n\n    // 환경 점수에 따른 생육 예측\n    const growthMultiplier = environmentScore / 100;\n    return {\n      predictedHeight: currentGrowth.plantHeight + stage.expectedGrowth.height * growthMultiplier,\n      predictedLeafCount: currentGrowth.leafCount + stage.expectedGrowth.leaves * growthMultiplier,\n      predictedHealthIndex: Math.min(100, currentGrowth.healthIndex + (environmentScore - 80)),\n      confidenceLevel: calculateConfidence(environmentScore),\n      recommendations: generateRecommendations(environmentScore, stage)\n    };\n  },\n  /**\n   * 환경 변화 예측 (기상 예보 + 현재 추세)\n   */\n  predictEnvironment: (currentEnvironment, weatherForecast, days = 7) => {\n    const predictions = [];\n    for (let day = 1; day <= days; day++) {\n      const weather = weatherForecast[day - 1] || {};\n\n      // 외부 기온 영향\n      const tempInfluence = weather.temperature ? weather.temperature * 0.3 : 0;\n      const humidityInfluence = weather.humidity ? weather.humidity * 0.2 : 0;\n\n      // 계절적 트렌드\n      const seasonalTrend = getSeasonalTrend(new Date(), day);\n      predictions.push({\n        date: addDays(new Date(), day),\n        temperature: currentEnvironment.temperature + tempInfluence + seasonalTrend.temperature,\n        humidity: currentEnvironment.humidity + humidityInfluence + seasonalTrend.humidity,\n        lightIntensity: weather.cloudCover ? currentEnvironment.lightIntensity * (1 - weather.cloudCover * 0.5) : currentEnvironment.lightIntensity,\n        confidence: calculateWeatherConfidence(day)\n      });\n    }\n    return predictions;\n  },\n  /**\n   * 필요 조치사항 예측\n   */\n  predictRequiredActions: (environmentPredictions, currentStage) => {\n    const actionSchedule = [];\n    environmentPredictions.forEach((prediction, index) => {\n      const day = index + 1;\n      const actions = [];\n\n      // 각 환경 요소별 체크\n      Object.keys(ENVIRONMENT_SENSORS).forEach(sensor => {\n        const sensorData = ENVIRONMENT_SENSORS[sensor];\n        const predictedValue = prediction[sensor];\n        if (predictedValue < sensorData.optimal[0]) {\n          actions.push({\n            ...ACTION_MATRIX[sensor].tooLow,\n            sensor,\n            predictedValue,\n            deviation: sensorData.optimal[0] - predictedValue,\n            scheduledTime: `${day}일 후`\n          });\n        } else if (predictedValue > sensorData.optimal[1]) {\n          actions.push({\n            ...ACTION_MATRIX[sensor].tooHigh,\n            sensor,\n            predictedValue,\n            deviation: predictedValue - sensorData.optimal[1],\n            scheduledTime: `${day}일 후`\n          });\n        }\n      });\n      if (actions.length > 0) {\n        actionSchedule.push({\n          date: prediction.date,\n          day: day,\n          actions: actions.sort((a, b) => getUrgencyScore(b.urgency) - getUrgencyScore(a.urgency))\n        });\n      }\n    });\n    return actionSchedule;\n  }\n};\n\n// 시뮬레이션 시나리오 정의\nexport const SIMULATION_SCENARIOS = {\n  normal: {\n    name: '정상 환경 시나리오',\n    description: '이상적인 환경 조건에서의 생육',\n    environmentModifier: {\n      temperature: 0,\n      humidity: 0,\n      lightIntensity: 1.0\n    },\n    expectedOutcome: '정상 생육, 예상 수확량 100%'\n  },\n  heatWave: {\n    name: '폭염 시나리오',\n    description: '연속 3일간 35°C 이상 고온',\n    environmentModifier: {\n      temperature: +10,\n      humidity: -15,\n      lightIntensity: 1.2\n    },\n    expectedOutcome: '생육 지연, 수확량 15% 감소 예상',\n    requiredActions: ['강제 환기', '차광 설치', '미스트 분무']\n  },\n  coldSnap: {\n    name: '한파 시나리오',\n    description: '연속 5일간 5°C 이하 저온',\n    environmentModifier: {\n      temperature: -8,\n      humidity: +10,\n      lightIntensity: 0.6\n    },\n    expectedOutcome: '생육 정지, 동해 위험',\n    requiredActions: ['난방 강화', '보온커튼', '온수 순환']\n  },\n  drought: {\n    name: '가뭄 시나리오',\n    description: '2주간 강수량 0mm, 토양 건조',\n    environmentModifier: {\n      soilMoisture: -25,\n      humidity: -20\n    },\n    expectedOutcome: '수분 스트레스, 수확량 20% 감소',\n    requiredActions: ['집중 관수', '멀칭', '습도 관리']\n  },\n  disease: {\n    name: '병해 발생 시나리오',\n    description: '고온다습으로 인한 곰팡이병 발생',\n    environmentModifier: {\n      temperature: +5,\n      humidity: +20\n    },\n    expectedOutcome: '병해 확산, 수확량 30% 감소 위험',\n    requiredActions: ['환기 강화', '제습', '방제 약제 살포']\n  },\n  optimal: {\n    name: '최적화 시나리오',\n    description: 'AI 최적 제어 시나리오',\n    environmentModifier: {\n      temperature: 0,\n      humidity: 0,\n      lightIntensity: 1.1\n    },\n    expectedOutcome: '최적 생육, 수확량 120% 달성',\n    requiredActions: ['정밀 환경 제어', '영양 관리', '생육 모니터링']\n  }\n};\n\n// 헬퍼 함수들\nconst getCurrentGrowthStage = week => {\n  const strawberryStages = GROWTH_STAGES.strawberry;\n  return strawberryStages.find(stage => week >= stage.weeks[0] && week <= stage.weeks[1]) || strawberryStages[0];\n};\nconst calculateEnvironmentScore = (environment, stage) => {\n  let totalScore = 0;\n  let metricCount = 0;\n  stage.keyMetrics.forEach(metric => {\n    const sensor = ENVIRONMENT_SENSORS[metric];\n    const value = environment[metric];\n    if (value >= sensor.optimal[0] && value <= sensor.optimal[1]) {\n      totalScore += 100;\n    } else if (value >= sensor.criticalLow && value <= sensor.criticalHigh) {\n      // 최적 범위 밖이지만 허용 범위 내\n      const deviation = Math.min(Math.abs(value - sensor.optimal[0]), Math.abs(value - sensor.optimal[1]));\n      const maxDeviation = Math.max(sensor.optimal[0] - sensor.criticalLow, sensor.criticalHigh - sensor.optimal[1]);\n      totalScore += Math.max(50, 100 - deviation / maxDeviation * 50);\n    } else {\n      // 위험 범위\n      totalScore += 20;\n    }\n    metricCount++;\n  });\n  return metricCount > 0 ? totalScore / metricCount : 0;\n};\nconst calculateConfidence = environmentScore => {\n  if (environmentScore >= 90) return 'high';\n  if (environmentScore >= 70) return 'medium';\n  return 'low';\n};\nconst generateRecommendations = (environmentScore, stage) => {\n  const recommendations = [];\n  if (environmentScore < 70) {\n    recommendations.push({\n      type: 'urgent',\n      message: '환경 개선이 시급합니다',\n      actions: stage.targetActions.slice(0, 2)\n    });\n  } else if (environmentScore < 85) {\n    recommendations.push({\n      type: 'caution',\n      message: '환경 모니터링을 강화하세요',\n      actions: stage.targetActions.slice(0, 3)\n    });\n  } else {\n    recommendations.push({\n      type: 'good',\n      message: '현재 환경이 양호합니다',\n      actions: ['현재 상태 유지', '정기 점검']\n    });\n  }\n  return recommendations;\n};\nconst getSeasonalTrend = (currentDate, daysAhead) => {\n  const futureDate = addDays(currentDate, daysAhead);\n  const month = futureDate.getMonth() + 1;\n\n  // 계절별 온도/습도 트렌드\n  if (month >= 3 && month <= 5) {\n    // 봄\n    return {\n      temperature: 0.2 * daysAhead,\n      humidity: -0.5 * daysAhead\n    };\n  } else if (month >= 6 && month <= 8) {\n    // 여름\n    return {\n      temperature: 0.1 * daysAhead,\n      humidity: 0.3 * daysAhead\n    };\n  } else if (month >= 9 && month <= 11) {\n    // 가을\n    return {\n      temperature: -0.2 * daysAhead,\n      humidity: 0.1 * daysAhead\n    };\n  } else {\n    // 겨울\n    return {\n      temperature: -0.1 * daysAhead,\n      humidity: -0.2 * daysAhead\n    };\n  }\n};\nconst calculateWeatherConfidence = daysAhead => {\n  // 예측 신뢰도는 날짜가 멀어질수록 감소\n  return Math.max(0.5, 1 - daysAhead * 0.1);\n};\nconst getUrgencyScore = urgency => {\n  const scores = {\n    high: 3,\n    medium: 2,\n    low: 1\n  };\n  return scores[urgency] || 0;\n};\nconst addDays = (date, days) => {\n  const result = new Date(date);\n  result.setDate(result.getDate() + days);\n  return result;\n};\n\n/**\n * 가상 온실 시뮬레이션 실행\n */\nexport const runGreenhouseSimulation = (scenario, currentEnvironment, currentWeek) => {\n  const selectedScenario = SIMULATION_SCENARIOS[scenario];\n  if (!selectedScenario) return null;\n\n  // 시나리오 적용된 환경 계산\n  const modifiedEnvironment = {\n    ...currentEnvironment\n  };\n  Object.keys(selectedScenario.environmentModifier).forEach(key => {\n    const modifier = selectedScenario.environmentModifier[key];\n    if (typeof modifier === 'number' && key !== 'lightIntensity') {\n      modifiedEnvironment[key] = currentEnvironment[key] + modifier;\n    } else if (key === 'lightIntensity') {\n      modifiedEnvironment[key] = currentEnvironment[key] * modifier;\n    }\n  });\n\n  // 7일간 예측 실행\n  const predictions = GROWTH_PREDICTION_ALGORITHM.predictEnvironment(modifiedEnvironment, generateMockWeatherForecast(), 7);\n  const requiredActions = GROWTH_PREDICTION_ALGORITHM.predictRequiredActions(predictions, getCurrentGrowthStage(currentWeek));\n  return {\n    scenario: selectedScenario,\n    modifiedEnvironment,\n    predictions,\n    requiredActions,\n    summary: {\n      totalActions: requiredActions.reduce((sum, day) => sum + day.actions.length, 0),\n      urgentActions: requiredActions.reduce((sum, day) => sum + day.actions.filter(a => a.urgency === 'high').length, 0),\n      estimatedCost: calculateTotalCost(requiredActions),\n      expectedOutcome: selectedScenario.expectedOutcome\n    }\n  };\n};\n\n// 모의 기상 예보 데이터 생성\nconst generateMockWeatherForecast = () => {\n  return Array.from({\n    length: 7\n  }, (_, i) => ({\n    day: i + 1,\n    temperature: 20 + Math.sin(i * 0.5) * 5 + (Math.random() - 0.5) * 4,\n    humidity: 60 + Math.cos(i * 0.3) * 15 + (Math.random() - 0.5) * 10,\n    cloudCover: Math.random() * 0.7,\n    windSpeed: 1 + Math.random() * 2,\n    precipitation: Math.random() < 0.3 ? Math.random() * 10 : 0\n  }));\n};\n\n// 총 비용 계산\nconst calculateTotalCost = actionSchedule => {\n  const costMap = {\n    low: 5000,\n    medium: 15000,\n    high: 30000\n  };\n  return actionSchedule.reduce((total, day) => {\n    return total + day.actions.reduce((dayTotal, action) => {\n      return dayTotal + (costMap[action.cost] || 0);\n    }, 0);\n  }, 0);\n};\n\n/**\n * 실시간 환경 모니터링 데이터 생성\n */\nexport const generateRealtimeEnvironmentData = (baseEnvironment, week) => {\n  const now = new Date();\n  const data = [];\n\n  // 지난 24시간 데이터 생성\n  for (let hour = 23; hour >= 0; hour--) {\n    const timestamp = new Date(now.getTime() - hour * 60 * 60 * 1000);\n    const hourOfDay = timestamp.getHours();\n    const isDay = hourOfDay >= 6 && hourOfDay <= 18;\n\n    // 시간대별 자연스러운 변화 패턴\n    const tempVariation = isDay ? Math.sin((hourOfDay - 6) / 12 * Math.PI) * 3 : -2;\n    const humidityVariation = isDay ? -5 + Math.random() * 10 : 5 + Math.random() * 10;\n    const lightVariation = isDay ? Math.sin((hourOfDay - 6) / 12 * Math.PI) * 0.8 : 0;\n    data.push({\n      timestamp: timestamp.toISOString(),\n      hour: hourOfDay,\n      temperature: baseEnvironment.temperature + tempVariation + (Math.random() - 0.5) * 2,\n      humidity: Math.max(30, Math.min(95, baseEnvironment.humidity + humidityVariation)),\n      co2: baseEnvironment.co2 + (isDay ? -50 : 100) + (Math.random() - 0.5) * 50,\n      lightIntensity: baseEnvironment.lightIntensity * lightVariation,\n      soilMoisture: baseEnvironment.soilMoisture + (Math.random() - 0.5) * 3,\n      soilPH: baseEnvironment.soilPH + (Math.random() - 0.5) * 0.2,\n      windSpeed: baseEnvironment.windSpeed + (Math.random() - 0.5) * 0.5\n    });\n  }\n  return data;\n};\n\n/**\n * 월간 환경 요약 데이터 생성\n */\nexport const generateMonthlyEnvironmentSummary = (year, month, baseEnvironment) => {\n  const daysInMonth = new Date(year, month, 0).getDate();\n  const monthlyData = [];\n  for (let day = 1; day <= daysInMonth; day++) {\n    const date = new Date(year, month - 1, day);\n    const dayOfYear = Math.floor((date - new Date(year, 0, 0)) / 86400000);\n\n    // 계절적 변화 패턴\n    const seasonalTemp = Math.sin(dayOfYear / 365 * 2 * Math.PI) * 10;\n    const seasonalHumidity = Math.cos(dayOfYear / 365 * 2 * Math.PI) * 15;\n\n    // 일별 랜덤 변화\n    const dailyVariation = (Math.random() - 0.5) * 5;\n    const dayData = {\n      date: date.toISOString().split('T')[0],\n      day: day,\n      avgTemperature: baseEnvironment.temperature + seasonalTemp + dailyVariation,\n      avgHumidity: Math.max(30, Math.min(95, baseEnvironment.humidity + seasonalHumidity - dailyVariation)),\n      avgLightIntensity: baseEnvironment.lightIntensity * (0.8 + Math.random() * 0.4),\n      avgSoilMoisture: baseEnvironment.soilMoisture + (Math.random() - 0.5) * 10,\n      // 환경 상태 평가\n      status: 'normal',\n      // normal, warning, critical\n      requiredActions: [],\n      weatherCondition: getRandomWeatherCondition()\n    };\n\n    // 환경 상태 평가 및 조치사항 결정\n    dayData.status = evaluateDayEnvironmentStatus(dayData);\n    dayData.requiredActions = generateDayActions(dayData);\n    monthlyData.push(dayData);\n  }\n  return monthlyData;\n};\n\n// 헬퍼 함수들\nconst evaluateDayEnvironmentStatus = dayData => {\n  const tempOk = dayData.avgTemperature >= 18 && dayData.avgTemperature <= 25;\n  const humidityOk = dayData.avgHumidity >= 60 && dayData.avgHumidity <= 75;\n  const soilOk = dayData.avgSoilMoisture >= 40 && dayData.avgSoilMoisture <= 65;\n  const okCount = [tempOk, humidityOk, soilOk].filter(Boolean).length;\n  if (okCount === 3) return 'optimal';\n  if (okCount >= 2) return 'normal';\n  if (okCount >= 1) return 'warning';\n  return 'critical';\n};\nconst generateDayActions = dayData => {\n  const actions = [];\n  if (dayData.avgTemperature < 18) {\n    actions.push({\n      type: 'heating',\n      priority: 'high',\n      description: '난방 필요'\n    });\n  } else if (dayData.avgTemperature > 25) {\n    actions.push({\n      type: 'cooling',\n      priority: 'high',\n      description: '냉각 필요'\n    });\n  }\n  if (dayData.avgSoilMoisture < 40) {\n    actions.push({\n      type: 'irrigation',\n      priority: 'high',\n      description: '관수 필요'\n    });\n  }\n  if (dayData.avgHumidity > 80) {\n    actions.push({\n      type: 'ventilation',\n      priority: 'medium',\n      description: '환기 필요'\n    });\n  }\n  return actions;\n};\nconst getRandomWeatherCondition = () => {\n  const conditions = ['맑음', '구름조금', '구름많음', '흐림', '비', '눈'];\n  const weights = [0.3, 0.25, 0.2, 0.15, 0.08, 0.02];\n  const random = Math.random();\n  let cumulative = 0;\n  for (let i = 0; i < conditions.length; i++) {\n    cumulative += weights[i];\n    if (random <= cumulative) {\n      return conditions[i];\n    }\n  }\n  return conditions[0];\n};","map":{"version":3,"names":["ENVIRONMENT_SENSORS","temperature","min","max","optimal","unit","description","criticalLow","criticalHigh","humidity","co2","lightIntensity","soilMoisture","soilPH","soilTemperature","windSpeed","GROWTH_STAGES","strawberry","weeks","stage","keyMetrics","targetActions","ACTION_MATRIX","tooLow","action","methods","urgency","duration","cost","tooHigh","GROWTH_PREDICTION_ALGORITHM","predictGrowth","currentEnvironment","currentGrowth","currentWeek","getCurrentGrowthStage","environmentScore","calculateEnvironmentScore","growthMultiplier","predictedHeight","plantHeight","expectedGrowth","height","predictedLeafCount","leafCount","leaves","predictedHealthIndex","Math","healthIndex","confidenceLevel","calculateConfidence","recommendations","generateRecommendations","predictEnvironment","weatherForecast","days","predictions","day","weather","tempInfluence","humidityInfluence","seasonalTrend","getSeasonalTrend","Date","push","date","addDays","cloudCover","confidence","calculateWeatherConfidence","predictRequiredActions","environmentPredictions","currentStage","actionSchedule","forEach","prediction","index","actions","Object","keys","sensor","sensorData","predictedValue","deviation","scheduledTime","length","sort","a","b","getUrgencyScore","SIMULATION_SCENARIOS","normal","name","environmentModifier","expectedOutcome","heatWave","requiredActions","coldSnap","drought","disease","week","strawberryStages","find","environment","totalScore","metricCount","metric","value","abs","maxDeviation","type","message","slice","currentDate","daysAhead","futureDate","month","getMonth","scores","high","medium","low","result","setDate","getDate","runGreenhouseSimulation","scenario","selectedScenario","modifiedEnvironment","key","modifier","generateMockWeatherForecast","summary","totalActions","reduce","sum","urgentActions","filter","estimatedCost","calculateTotalCost","Array","from","_","i","sin","random","cos","precipitation","costMap","total","dayTotal","generateRealtimeEnvironmentData","baseEnvironment","now","data","hour","timestamp","getTime","hourOfDay","getHours","isDay","tempVariation","PI","humidityVariation","lightVariation","toISOString","generateMonthlyEnvironmentSummary","year","daysInMonth","monthlyData","dayOfYear","floor","seasonalTemp","seasonalHumidity","dailyVariation","dayData","split","avgTemperature","avgHumidity","avgLightIntensity","avgSoilMoisture","status","weatherCondition","getRandomWeatherCondition","evaluateDayEnvironmentStatus","generateDayActions","tempOk","humidityOk","soilOk","okCount","Boolean","priority","conditions","weights","cumulative"],"sources":["/DATA1/elcom/aisf2/aisf/frontend/src/utils/greenhouseSimulator.js"],"sourcesContent":["/**\n * 가상 온실 환경 시뮬레이터\n * 환경 데이터, 조치사항, 예측 알고리즘을 통합 관리\n */\n\n// 온실 환경 센서 데이터 정의\nexport const ENVIRONMENT_SENSORS = {\n  temperature: { \n    min: 5, max: 40, optimal: [18, 25], unit: '°C',\n    description: '온실 내부 온도',\n    criticalLow: 10, criticalHigh: 35\n  },\n  humidity: { \n    min: 30, max: 95, optimal: [60, 75], unit: '%',\n    description: '상대 습도',\n    criticalLow: 40, criticalHigh: 85\n  },\n  co2: { \n    min: 300, max: 1500, optimal: [400, 800], unit: 'ppm',\n    description: '이산화탄소 농도',\n    criticalLow: 350, criticalHigh: 1200\n  },\n  lightIntensity: { \n    min: 0, max: 50000, optimal: [20000, 40000], unit: 'lux',\n    description: '광량',\n    criticalLow: 15000, criticalHigh: 45000\n  },\n  soilMoisture: { \n    min: 20, max: 80, optimal: [40, 65], unit: '%',\n    description: '토양 수분',\n    criticalLow: 30, criticalHigh: 75\n  },\n  soilPH: { \n    min: 5.0, max: 8.0, optimal: [6.0, 6.8], unit: 'pH',\n    description: '토양 산도',\n    criticalLow: 5.5, criticalHigh: 7.5\n  },\n  soilTemperature: { \n    min: 10, max: 35, optimal: [15, 25], unit: '°C',\n    description: '지온',\n    criticalLow: 12, criticalHigh: 30\n  },\n  windSpeed: { \n    min: 0, max: 5, optimal: [0.5, 2.0], unit: 'm/s',\n    description: '환기 풍속',\n    criticalLow: 0.2, criticalHigh: 3.0\n  }\n};\n\n// 작물 생육 단계 정의 (딸기 기준)\nexport const GROWTH_STAGES = {\n  strawberry: [\n    { \n      weeks: [1, 4], \n      stage: '정식기', \n      description: '묘 정식 및 활착',\n      keyMetrics: ['soilMoisture', 'soilTemperature', 'humidity'],\n      targetActions: ['정식', '활착관리', '토양조성']\n    },\n    { \n      weeks: [5, 12], \n      stage: '영양생장기', \n      description: '잎과 뿌리 발달',\n      keyMetrics: ['temperature', 'lightIntensity', 'co2'],\n      targetActions: ['관수관리', '온도관리', '병해예방', '엽면시비']\n    },\n    { \n      weeks: [13, 20], \n      stage: '화아분화기', \n      description: '꽃눈 형성',\n      keyMetrics: ['temperature', 'lightIntensity'],\n      targetActions: ['저온처리', '일장조절', '영양관리', '적심']\n    },\n    { \n      weeks: [21, 28], \n      stage: '개화기', \n      description: '개화 및 수분',\n      keyMetrics: ['humidity', 'temperature', 'windSpeed'],\n      targetActions: ['수분관리', '온도조절', '환기관리', '꽃솎기']\n    },\n    { \n      weeks: [29, 40], \n      stage: '결실기', \n      description: '과실 비대',\n      keyMetrics: ['soilMoisture', 'temperature', 'lightIntensity'],\n      targetActions: ['과실관리', '적과', '품질관리', '칼슘공급']\n    },\n    { \n      weeks: [41, 52], \n      stage: '수확기', \n      description: '수확 및 품질 유지',\n      keyMetrics: ['humidity', 'temperature'],\n      targetActions: ['수확', '품질선별', '저장관리', '다음기작준비']\n    }\n  ]\n};\n\n// 조치사항 매트릭스\nexport const ACTION_MATRIX = {\n  temperature: {\n    tooLow: { \n      action: 'heating', \n      description: '난방 시스템 가동',\n      methods: ['온풍기 가동', '보온커튼 설치', '열펌프 운전'],\n      urgency: 'high',\n      duration: '2-4시간',\n      cost: 'medium'\n    },\n    tooHigh: { \n      action: 'cooling', \n      description: '냉각 시스템 가동',\n      methods: ['환기팬 가동', '차광막 설치', '미스트 분무', '지붕 환기창 개방'],\n      urgency: 'high',\n      duration: '1-3시간',\n      cost: 'low'\n    }\n  },\n  humidity: {\n    tooLow: { \n      action: 'humidification', \n      description: '가습 실시',\n      methods: ['미스트 분무', '젖은 수건 설치', '물 증발판 설치'],\n      urgency: 'medium',\n      duration: '30분-1시간',\n      cost: 'low'\n    },\n    tooHigh: { \n      action: 'dehumidification', \n      description: '제습 실시',\n      methods: ['환기 강화', '제습기 가동', '난방으로 습도 조절'],\n      urgency: 'medium',\n      duration: '1-2시간',\n      cost: 'medium'\n    }\n  },\n  soilMoisture: {\n    tooLow: { \n      action: 'irrigation', \n      description: '관수 실시',\n      methods: ['점적관수', '스프링클러', '저면관수'],\n      urgency: 'high',\n      duration: '15-30분',\n      cost: 'low'\n    },\n    tooHigh: { \n      action: 'drainage', \n      description: '배수 및 건조',\n      methods: ['배수로 개방', '환기 강화', '관수 중단'],\n      urgency: 'medium',\n      duration: '4-8시간',\n      cost: 'low'\n    }\n  },\n  lightIntensity: {\n    tooLow: { \n      action: 'supplementalLighting', \n      description: '보광 실시',\n      methods: ['LED 보광등', 'HPS 램프', '형광등'],\n      urgency: 'low',\n      duration: '4-8시간',\n      cost: 'high'\n    },\n    tooHigh: { \n      action: 'shading', \n      description: '차광 실시',\n      methods: ['차광막 설치', '차광도료 도포', '자연 차광'],\n      urgency: 'medium',\n      duration: '지속적',\n      cost: 'medium'\n    }\n  },\n  co2: {\n    tooLow: { \n      action: 'co2Injection', \n      description: 'CO2 공급',\n      methods: ['CO2 발생기', '드라이아이스', '연소식 CO2 공급'],\n      urgency: 'low',\n      duration: '2-4시간',\n      cost: 'medium'\n    }\n  }\n};\n\n// 생육 예측 알고리즘\nexport const GROWTH_PREDICTION_ALGORITHM = {\n  /**\n   * 현재 환경 조건에서 7일 후 생육 상태 예측\n   */\n  predictGrowth: (currentEnvironment, currentGrowth, currentWeek) => {\n    const stage = getCurrentGrowthStage(currentWeek);\n    const environmentScore = calculateEnvironmentScore(currentEnvironment, stage);\n    \n    // 환경 점수에 따른 생육 예측\n    const growthMultiplier = environmentScore / 100;\n    \n    return {\n      predictedHeight: currentGrowth.plantHeight + (stage.expectedGrowth.height * growthMultiplier),\n      predictedLeafCount: currentGrowth.leafCount + (stage.expectedGrowth.leaves * growthMultiplier),\n      predictedHealthIndex: Math.min(100, currentGrowth.healthIndex + (environmentScore - 80)),\n      confidenceLevel: calculateConfidence(environmentScore),\n      recommendations: generateRecommendations(environmentScore, stage)\n    };\n  },\n\n  /**\n   * 환경 변화 예측 (기상 예보 + 현재 추세)\n   */\n  predictEnvironment: (currentEnvironment, weatherForecast, days = 7) => {\n    const predictions = [];\n    \n    for (let day = 1; day <= days; day++) {\n      const weather = weatherForecast[day - 1] || {};\n      \n      // 외부 기온 영향\n      const tempInfluence = weather.temperature ? weather.temperature * 0.3 : 0;\n      const humidityInfluence = weather.humidity ? weather.humidity * 0.2 : 0;\n      \n      // 계절적 트렌드\n      const seasonalTrend = getSeasonalTrend(new Date(), day);\n      \n      predictions.push({\n        date: addDays(new Date(), day),\n        temperature: currentEnvironment.temperature + tempInfluence + seasonalTrend.temperature,\n        humidity: currentEnvironment.humidity + humidityInfluence + seasonalTrend.humidity,\n        lightIntensity: weather.cloudCover ? \n          currentEnvironment.lightIntensity * (1 - weather.cloudCover * 0.5) : \n          currentEnvironment.lightIntensity,\n        confidence: calculateWeatherConfidence(day)\n      });\n    }\n    \n    return predictions;\n  },\n\n  /**\n   * 필요 조치사항 예측\n   */\n  predictRequiredActions: (environmentPredictions, currentStage) => {\n    const actionSchedule = [];\n    \n    environmentPredictions.forEach((prediction, index) => {\n      const day = index + 1;\n      const actions = [];\n      \n      // 각 환경 요소별 체크\n      Object.keys(ENVIRONMENT_SENSORS).forEach(sensor => {\n        const sensorData = ENVIRONMENT_SENSORS[sensor];\n        const predictedValue = prediction[sensor];\n        \n        if (predictedValue < sensorData.optimal[0]) {\n          actions.push({\n            ...ACTION_MATRIX[sensor].tooLow,\n            sensor,\n            predictedValue,\n            deviation: sensorData.optimal[0] - predictedValue,\n            scheduledTime: `${day}일 후`\n          });\n        } else if (predictedValue > sensorData.optimal[1]) {\n          actions.push({\n            ...ACTION_MATRIX[sensor].tooHigh,\n            sensor,\n            predictedValue,\n            deviation: predictedValue - sensorData.optimal[1],\n            scheduledTime: `${day}일 후`\n          });\n        }\n      });\n      \n      if (actions.length > 0) {\n        actionSchedule.push({\n          date: prediction.date,\n          day: day,\n          actions: actions.sort((a, b) => getUrgencyScore(b.urgency) - getUrgencyScore(a.urgency))\n        });\n      }\n    });\n    \n    return actionSchedule;\n  }\n};\n\n// 시뮬레이션 시나리오 정의\nexport const SIMULATION_SCENARIOS = {\n  normal: {\n    name: '정상 환경 시나리오',\n    description: '이상적인 환경 조건에서의 생육',\n    environmentModifier: { temperature: 0, humidity: 0, lightIntensity: 1.0 },\n    expectedOutcome: '정상 생육, 예상 수확량 100%'\n  },\n  \n  heatWave: {\n    name: '폭염 시나리오',\n    description: '연속 3일간 35°C 이상 고온',\n    environmentModifier: { temperature: +10, humidity: -15, lightIntensity: 1.2 },\n    expectedOutcome: '생육 지연, 수확량 15% 감소 예상',\n    requiredActions: ['강제 환기', '차광 설치', '미스트 분무']\n  },\n  \n  coldSnap: {\n    name: '한파 시나리오',\n    description: '연속 5일간 5°C 이하 저온',\n    environmentModifier: { temperature: -8, humidity: +10, lightIntensity: 0.6 },\n    expectedOutcome: '생육 정지, 동해 위험',\n    requiredActions: ['난방 강화', '보온커튼', '온수 순환']\n  },\n  \n  drought: {\n    name: '가뭄 시나리오',\n    description: '2주간 강수량 0mm, 토양 건조',\n    environmentModifier: { soilMoisture: -25, humidity: -20 },\n    expectedOutcome: '수분 스트레스, 수확량 20% 감소',\n    requiredActions: ['집중 관수', '멀칭', '습도 관리']\n  },\n  \n  disease: {\n    name: '병해 발생 시나리오',\n    description: '고온다습으로 인한 곰팡이병 발생',\n    environmentModifier: { temperature: +5, humidity: +20 },\n    expectedOutcome: '병해 확산, 수확량 30% 감소 위험',\n    requiredActions: ['환기 강화', '제습', '방제 약제 살포']\n  },\n  \n  optimal: {\n    name: '최적화 시나리오',\n    description: 'AI 최적 제어 시나리오',\n    environmentModifier: { temperature: 0, humidity: 0, lightIntensity: 1.1 },\n    expectedOutcome: '최적 생육, 수확량 120% 달성',\n    requiredActions: ['정밀 환경 제어', '영양 관리', '생육 모니터링']\n  }\n};\n\n// 헬퍼 함수들\nconst getCurrentGrowthStage = (week) => {\n  const strawberryStages = GROWTH_STAGES.strawberry;\n  return strawberryStages.find(stage => \n    week >= stage.weeks[0] && week <= stage.weeks[1]\n  ) || strawberryStages[0];\n};\n\nconst calculateEnvironmentScore = (environment, stage) => {\n  let totalScore = 0;\n  let metricCount = 0;\n  \n  stage.keyMetrics.forEach(metric => {\n    const sensor = ENVIRONMENT_SENSORS[metric];\n    const value = environment[metric];\n    \n    if (value >= sensor.optimal[0] && value <= sensor.optimal[1]) {\n      totalScore += 100;\n    } else if (value >= sensor.criticalLow && value <= sensor.criticalHigh) {\n      // 최적 범위 밖이지만 허용 범위 내\n      const deviation = Math.min(\n        Math.abs(value - sensor.optimal[0]),\n        Math.abs(value - sensor.optimal[1])\n      );\n      const maxDeviation = Math.max(\n        sensor.optimal[0] - sensor.criticalLow,\n        sensor.criticalHigh - sensor.optimal[1]\n      );\n      totalScore += Math.max(50, 100 - (deviation / maxDeviation) * 50);\n    } else {\n      // 위험 범위\n      totalScore += 20;\n    }\n    metricCount++;\n  });\n  \n  return metricCount > 0 ? totalScore / metricCount : 0;\n};\n\nconst calculateConfidence = (environmentScore) => {\n  if (environmentScore >= 90) return 'high';\n  if (environmentScore >= 70) return 'medium';\n  return 'low';\n};\n\nconst generateRecommendations = (environmentScore, stage) => {\n  const recommendations = [];\n  \n  if (environmentScore < 70) {\n    recommendations.push({\n      type: 'urgent',\n      message: '환경 개선이 시급합니다',\n      actions: stage.targetActions.slice(0, 2)\n    });\n  } else if (environmentScore < 85) {\n    recommendations.push({\n      type: 'caution',\n      message: '환경 모니터링을 강화하세요',\n      actions: stage.targetActions.slice(0, 3)\n    });\n  } else {\n    recommendations.push({\n      type: 'good',\n      message: '현재 환경이 양호합니다',\n      actions: ['현재 상태 유지', '정기 점검']\n    });\n  }\n  \n  return recommendations;\n};\n\nconst getSeasonalTrend = (currentDate, daysAhead) => {\n  const futureDate = addDays(currentDate, daysAhead);\n  const month = futureDate.getMonth() + 1;\n  \n  // 계절별 온도/습도 트렌드\n  if (month >= 3 && month <= 5) { // 봄\n    return { temperature: 0.2 * daysAhead, humidity: -0.5 * daysAhead };\n  } else if (month >= 6 && month <= 8) { // 여름\n    return { temperature: 0.1 * daysAhead, humidity: 0.3 * daysAhead };\n  } else if (month >= 9 && month <= 11) { // 가을\n    return { temperature: -0.2 * daysAhead, humidity: 0.1 * daysAhead };\n  } else { // 겨울\n    return { temperature: -0.1 * daysAhead, humidity: -0.2 * daysAhead };\n  }\n};\n\nconst calculateWeatherConfidence = (daysAhead) => {\n  // 예측 신뢰도는 날짜가 멀어질수록 감소\n  return Math.max(0.5, 1 - (daysAhead * 0.1));\n};\n\nconst getUrgencyScore = (urgency) => {\n  const scores = { high: 3, medium: 2, low: 1 };\n  return scores[urgency] || 0;\n};\n\nconst addDays = (date, days) => {\n  const result = new Date(date);\n  result.setDate(result.getDate() + days);\n  return result;\n};\n\n/**\n * 가상 온실 시뮬레이션 실행\n */\nexport const runGreenhouseSimulation = (scenario, currentEnvironment, currentWeek) => {\n  const selectedScenario = SIMULATION_SCENARIOS[scenario];\n  if (!selectedScenario) return null;\n  \n  // 시나리오 적용된 환경 계산\n  const modifiedEnvironment = { ...currentEnvironment };\n  Object.keys(selectedScenario.environmentModifier).forEach(key => {\n    const modifier = selectedScenario.environmentModifier[key];\n    if (typeof modifier === 'number' && key !== 'lightIntensity') {\n      modifiedEnvironment[key] = currentEnvironment[key] + modifier;\n    } else if (key === 'lightIntensity') {\n      modifiedEnvironment[key] = currentEnvironment[key] * modifier;\n    }\n  });\n  \n  // 7일간 예측 실행\n  const predictions = GROWTH_PREDICTION_ALGORITHM.predictEnvironment(\n    modifiedEnvironment, \n    generateMockWeatherForecast(), \n    7\n  );\n  \n  const requiredActions = GROWTH_PREDICTION_ALGORITHM.predictRequiredActions(\n    predictions, \n    getCurrentGrowthStage(currentWeek)\n  );\n  \n  return {\n    scenario: selectedScenario,\n    modifiedEnvironment,\n    predictions,\n    requiredActions,\n    summary: {\n      totalActions: requiredActions.reduce((sum, day) => sum + day.actions.length, 0),\n      urgentActions: requiredActions.reduce((sum, day) => \n        sum + day.actions.filter(a => a.urgency === 'high').length, 0\n      ),\n      estimatedCost: calculateTotalCost(requiredActions),\n      expectedOutcome: selectedScenario.expectedOutcome\n    }\n  };\n};\n\n// 모의 기상 예보 데이터 생성\nconst generateMockWeatherForecast = () => {\n  return Array.from({ length: 7 }, (_, i) => ({\n    day: i + 1,\n    temperature: 20 + Math.sin(i * 0.5) * 5 + (Math.random() - 0.5) * 4,\n    humidity: 60 + Math.cos(i * 0.3) * 15 + (Math.random() - 0.5) * 10,\n    cloudCover: Math.random() * 0.7,\n    windSpeed: 1 + Math.random() * 2,\n    precipitation: Math.random() < 0.3 ? Math.random() * 10 : 0\n  }));\n};\n\n// 총 비용 계산\nconst calculateTotalCost = (actionSchedule) => {\n  const costMap = { low: 5000, medium: 15000, high: 30000 };\n  \n  return actionSchedule.reduce((total, day) => {\n    return total + day.actions.reduce((dayTotal, action) => {\n      return dayTotal + (costMap[action.cost] || 0);\n    }, 0);\n  }, 0);\n};\n\n/**\n * 실시간 환경 모니터링 데이터 생성\n */\nexport const generateRealtimeEnvironmentData = (baseEnvironment, week) => {\n  const now = new Date();\n  const data = [];\n  \n  // 지난 24시간 데이터 생성\n  for (let hour = 23; hour >= 0; hour--) {\n    const timestamp = new Date(now.getTime() - hour * 60 * 60 * 1000);\n    const hourOfDay = timestamp.getHours();\n    const isDay = hourOfDay >= 6 && hourOfDay <= 18;\n    \n    // 시간대별 자연스러운 변화 패턴\n    const tempVariation = isDay ? \n      Math.sin((hourOfDay - 6) / 12 * Math.PI) * 3 : -2;\n    const humidityVariation = isDay ? -5 + Math.random() * 10 : 5 + Math.random() * 10;\n    const lightVariation = isDay ? \n      Math.sin((hourOfDay - 6) / 12 * Math.PI) * 0.8 : 0;\n    \n    data.push({\n      timestamp: timestamp.toISOString(),\n      hour: hourOfDay,\n      temperature: baseEnvironment.temperature + tempVariation + (Math.random() - 0.5) * 2,\n      humidity: Math.max(30, Math.min(95, baseEnvironment.humidity + humidityVariation)),\n      co2: baseEnvironment.co2 + (isDay ? -50 : 100) + (Math.random() - 0.5) * 50,\n      lightIntensity: baseEnvironment.lightIntensity * lightVariation,\n      soilMoisture: baseEnvironment.soilMoisture + (Math.random() - 0.5) * 3,\n      soilPH: baseEnvironment.soilPH + (Math.random() - 0.5) * 0.2,\n      windSpeed: baseEnvironment.windSpeed + (Math.random() - 0.5) * 0.5\n    });\n  }\n  \n  return data;\n};\n\n/**\n * 월간 환경 요약 데이터 생성\n */\nexport const generateMonthlyEnvironmentSummary = (year, month, baseEnvironment) => {\n  const daysInMonth = new Date(year, month, 0).getDate();\n  const monthlyData = [];\n  \n  for (let day = 1; day <= daysInMonth; day++) {\n    const date = new Date(year, month - 1, day);\n    const dayOfYear = Math.floor((date - new Date(year, 0, 0)) / 86400000);\n    \n    // 계절적 변화 패턴\n    const seasonalTemp = Math.sin((dayOfYear / 365) * 2 * Math.PI) * 10;\n    const seasonalHumidity = Math.cos((dayOfYear / 365) * 2 * Math.PI) * 15;\n    \n    // 일별 랜덤 변화\n    const dailyVariation = (Math.random() - 0.5) * 5;\n    \n    const dayData = {\n      date: date.toISOString().split('T')[0],\n      day: day,\n      avgTemperature: baseEnvironment.temperature + seasonalTemp + dailyVariation,\n      avgHumidity: Math.max(30, Math.min(95, baseEnvironment.humidity + seasonalHumidity - dailyVariation)),\n      avgLightIntensity: baseEnvironment.lightIntensity * (0.8 + Math.random() * 0.4),\n      avgSoilMoisture: baseEnvironment.soilMoisture + (Math.random() - 0.5) * 10,\n      \n      // 환경 상태 평가\n      status: 'normal', // normal, warning, critical\n      requiredActions: [],\n      weatherCondition: getRandomWeatherCondition()\n    };\n    \n    // 환경 상태 평가 및 조치사항 결정\n    dayData.status = evaluateDayEnvironmentStatus(dayData);\n    dayData.requiredActions = generateDayActions(dayData);\n    \n    monthlyData.push(dayData);\n  }\n  \n  return monthlyData;\n};\n\n// 헬퍼 함수들\nconst evaluateDayEnvironmentStatus = (dayData) => {\n  const tempOk = dayData.avgTemperature >= 18 && dayData.avgTemperature <= 25;\n  const humidityOk = dayData.avgHumidity >= 60 && dayData.avgHumidity <= 75;\n  const soilOk = dayData.avgSoilMoisture >= 40 && dayData.avgSoilMoisture <= 65;\n  \n  const okCount = [tempOk, humidityOk, soilOk].filter(Boolean).length;\n  \n  if (okCount === 3) return 'optimal';\n  if (okCount >= 2) return 'normal';\n  if (okCount >= 1) return 'warning';\n  return 'critical';\n};\n\nconst generateDayActions = (dayData) => {\n  const actions = [];\n  \n  if (dayData.avgTemperature < 18) {\n    actions.push({ type: 'heating', priority: 'high', description: '난방 필요' });\n  } else if (dayData.avgTemperature > 25) {\n    actions.push({ type: 'cooling', priority: 'high', description: '냉각 필요' });\n  }\n  \n  if (dayData.avgSoilMoisture < 40) {\n    actions.push({ type: 'irrigation', priority: 'high', description: '관수 필요' });\n  }\n  \n  if (dayData.avgHumidity > 80) {\n    actions.push({ type: 'ventilation', priority: 'medium', description: '환기 필요' });\n  }\n  \n  return actions;\n};\n\nconst getRandomWeatherCondition = () => {\n  const conditions = ['맑음', '구름조금', '구름많음', '흐림', '비', '눈'];\n  const weights = [0.3, 0.25, 0.2, 0.15, 0.08, 0.02];\n  \n  const random = Math.random();\n  let cumulative = 0;\n  \n  for (let i = 0; i < conditions.length; i++) {\n    cumulative += weights[i];\n    if (random <= cumulative) {\n      return conditions[i];\n    }\n  }\n  \n  return conditions[0];\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}